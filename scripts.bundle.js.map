{"version":3,"sources":["D:/ng2-tree/node_modules/alertifyjs/build/alertify.js","D:/ng2-tree/node_modules/script-loader/addScript.js","D:/ng2-tree/node_modules/alertifyjs/build/alertify.js?30e1"],"names":[],"mappings":"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","file":"scripts.bundle.js","sourcesContent":["module.exports = \"/**\\r\\n * alertifyjs 1.10.0 http://alertifyjs.com\\r\\n * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.\\r\\n * Copyright 2017 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) \\r\\n * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/\\r\\n( function ( window ) {\\r\\n    'use strict';\\r\\n    \\r\\n    /**\\r\\n     * Keys enum\\r\\n     * @type {Object}\\r\\n     */\\r\\n    var keys = {\\r\\n        ENTER: 13,\\r\\n        ESC: 27,\\r\\n        F1: 112,\\r\\n        F12: 123,\\r\\n        LEFT: 37,\\r\\n        RIGHT: 39\\r\\n    };\\r\\n    /**\\r\\n     * Default options \\r\\n     * @type {Object}\\r\\n     */\\r\\n    var defaults = {\\r\\n        autoReset:true,\\r\\n        basic:false,\\r\\n        closable:true,\\r\\n        closableByDimmer:true,\\r\\n        frameless:false,\\r\\n        maintainFocus:true, //global default not per instance, applies to all dialogs\\r\\n        maximizable:true,\\r\\n        modal:true,\\r\\n        movable:true,\\r\\n        moveBounded:false,\\r\\n        overflow:true,\\r\\n        padding: true,\\r\\n        pinnable:true,\\r\\n        pinned:true,\\r\\n        preventBodyShift:false, //global default not per instance, applies to all dialogs\\r\\n        resizable:true,\\r\\n        startMaximized:false,\\r\\n        transition:'pulse',\\r\\n        notifier:{\\r\\n            delay:5,\\r\\n            position:'bottom-right',\\r\\n            closeButton:false\\r\\n        },\\r\\n        glossary:{\\r\\n            title:'AlertifyJS',\\r\\n            ok: 'OK',\\r\\n            cancel: 'Cancel',\\r\\n            acccpt: 'Accept',\\r\\n            deny: 'Deny',\\r\\n            confirm: 'Confirm',\\r\\n            decline: 'Decline',\\r\\n            close: 'Close',\\r\\n            maximize: 'Maximize',\\r\\n            restore: 'Restore',\\r\\n        },\\r\\n        theme:{\\r\\n            input:'ajs-input',\\r\\n            ok:'ajs-ok',\\r\\n            cancel:'ajs-cancel',\\r\\n        }\\r\\n    };\\r\\n    \\r\\n    //holds open dialogs instances\\r\\n    var openDialogs = [];\\r\\n\\r\\n    /**\\r\\n     * [Helper]  Adds the specified class(es) to the element.\\r\\n     *\\r\\n     * @element {node}      The element\\r\\n     * @className {string}  One or more space-separated classes to be added to the class attribute of the element.\\r\\n     * \\r\\n     * @return {undefined}\\r\\n     */\\r\\n    function addClass(element,classNames){\\r\\n        element.className += ' ' + classNames;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * [Helper]  Removes the specified class(es) from the element.\\r\\n     *\\r\\n     * @element {node}      The element\\r\\n     * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.\\r\\n     * \\r\\n     * @return {undefined}\\r\\n     */\\r\\n    function removeClass(element, classNames) {\\r\\n        var original = element.className.split(' ');\\r\\n        var toBeRemoved = classNames.split(' ');\\r\\n        for (var x = 0; x < toBeRemoved.length; x += 1) {\\r\\n            var index = original.indexOf(toBeRemoved[x]);\\r\\n            if (index > -1){\\r\\n                original.splice(index,1);\\r\\n            }\\r\\n        }\\r\\n        element.className = original.join(' ');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * [Helper]  Checks if the document is RTL\\r\\n     *\\r\\n     * @return {Boolean} True if the document is RTL, false otherwise.\\r\\n     */\\r\\n    function isRightToLeft(){\\r\\n        return window.getComputedStyle(document.body).direction === 'rtl';\\r\\n    }\\r\\n    /**\\r\\n     * [Helper]  Get the document current scrollTop\\r\\n     *\\r\\n     * @return {Number} current document scrollTop value\\r\\n     */\\r\\n    function getScrollTop(){\\r\\n        return ((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * [Helper]  Get the document current scrollLeft\\r\\n     *\\r\\n     * @return {Number} current document scrollLeft value\\r\\n     */\\r\\n    function getScrollLeft(){\\r\\n        return ((document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Helper: clear contents\\r\\n    *\\r\\n    */\\r\\n    function clearContents(element){\\r\\n        while (element.lastChild) {\\r\\n            element.removeChild(element.lastChild);\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n     * Extends a given prototype by merging properties from base into sub.\\r\\n     *\\r\\n     * @sub {Object} sub The prototype being overwritten.\\r\\n     * @base {Object} base The prototype being written.\\r\\n     *\\r\\n     * @return {Object} The extended prototype.\\r\\n     */\\r\\n    function copy(src) {\\r\\n        if(null === src){\\r\\n            return src;\\r\\n        }\\r\\n        var cpy;\\r\\n        if(Array.isArray(src)){\\r\\n            cpy = [];\\r\\n            for(var x=0;x<src.length;x+=1){\\r\\n                cpy.push(copy(src[x]));\\r\\n            }\\r\\n            return cpy;\\r\\n        }\\r\\n      \\r\\n        if(src instanceof Date){\\r\\n            return new Date(src.getTime());\\r\\n        }\\r\\n      \\r\\n        if(src instanceof RegExp){\\r\\n            cpy = new RegExp(src.source);\\r\\n            cpy.global = src.global;\\r\\n            cpy.ignoreCase = src.ignoreCase;\\r\\n            cpy.multiline = src.multiline;\\r\\n            cpy.lastIndex = src.lastIndex;\\r\\n            return cpy;\\r\\n        }\\r\\n        \\r\\n        if(typeof src === 'object'){\\r\\n            cpy = {};\\r\\n            // copy dialog pototype over definition.\\r\\n            for (var prop in src) {\\r\\n                if (src.hasOwnProperty(prop)) {\\r\\n                    cpy[prop] = copy(src[prop]);\\r\\n                }\\r\\n            }\\r\\n            return cpy;\\r\\n        }\\r\\n        return src;\\r\\n    }\\r\\n    /**\\r\\n      * Helper: destruct the dialog\\r\\n      *\\r\\n      */\\r\\n    function destruct(instance, initialize){\\r\\n        //delete the dom and it's references.\\r\\n        var root = instance.elements.root;\\r\\n        root.parentNode.removeChild(root);\\r\\n        delete instance.elements;\\r\\n        //copy back initial settings.\\r\\n        instance.settings = copy(instance.__settings);\\r\\n        //re-reference init function.\\r\\n        instance.__init = initialize;\\r\\n        //delete __internal variable to allow re-initialization.\\r\\n        delete instance.__internal;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use a closure to return proper event listener method. Try to use\\r\\n     * `addEventListener` by default but fallback to `attachEvent` for\\r\\n     * unsupported browser. The closure simply ensures that the test doesn't\\r\\n     * happen every time the method is called.\\r\\n     *\\r\\n     * @param    {Node}     el    Node element\\r\\n     * @param    {String}   event Event type\\r\\n     * @param    {Function} fn    Callback of event\\r\\n     * @return   {Function}\\r\\n     */\\r\\n    var on = (function () {\\r\\n        if (document.addEventListener) {\\r\\n            return function (el, event, fn, useCapture) {\\r\\n                el.addEventListener(event, fn, useCapture === true);\\r\\n            };\\r\\n        } else if (document.attachEvent) {\\r\\n            return function (el, event, fn) {\\r\\n                el.attachEvent('on' + event, fn);\\r\\n            };\\r\\n        }\\r\\n    }());\\r\\n\\r\\n    /**\\r\\n     * Use a closure to return proper event listener method. Try to use\\r\\n     * `removeEventListener` by default but fallback to `detachEvent` for\\r\\n     * unsupported browser. The closure simply ensures that the test doesn't\\r\\n     * happen every time the method is called.\\r\\n     *\\r\\n     * @param    {Node}     el    Node element\\r\\n     * @param    {String}   event Event type\\r\\n     * @param    {Function} fn    Callback of event\\r\\n     * @return   {Function}\\r\\n     */\\r\\n    var off = (function () {\\r\\n        if (document.removeEventListener) {\\r\\n            return function (el, event, fn, useCapture) {\\r\\n                el.removeEventListener(event, fn, useCapture === true);\\r\\n            };\\r\\n        } else if (document.detachEvent) {\\r\\n            return function (el, event, fn) {\\r\\n                el.detachEvent('on' + event, fn);\\r\\n            };\\r\\n        }\\r\\n    }());\\r\\n\\r\\n    /**\\r\\n     * Prevent default event from firing\\r\\n     *\\r\\n     * @param  {Event} event Event object\\r\\n     * @return {undefined}\\r\\n\\r\\n    function prevent ( event ) {\\r\\n        if ( event ) {\\r\\n            if ( event.preventDefault ) {\\r\\n                event.preventDefault();\\r\\n            } else {\\r\\n                event.returnValue = false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    */\\r\\n    var transition = (function () {\\r\\n        var t, type;\\r\\n        var supported = false;\\r\\n        var transitions = {\\r\\n            'animation'        : 'animationend',\\r\\n            'OAnimation'       : 'oAnimationEnd oanimationend',\\r\\n            'msAnimation'      : 'MSAnimationEnd',\\r\\n            'MozAnimation'     : 'animationend',\\r\\n            'WebkitAnimation'  : 'webkitAnimationEnd'\\r\\n        };\\r\\n\\r\\n        for (t in transitions) {\\r\\n            if (document.documentElement.style[t] !== undefined) {\\r\\n                type = transitions[t];\\r\\n                supported = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return {\\r\\n            type: type,\\r\\n            supported: supported\\r\\n        };\\r\\n    }());\\r\\n\\r\\n    /**\\r\\n    * Creates event handler delegate that sends the instance as last argument.\\r\\n    * \\r\\n    * @return {Function}    a function wrapper which sends the instance as last argument.\\r\\n    */\\r\\n    function delegate(context, method) {\\r\\n        return function () {\\r\\n            if (arguments.length > 0) {\\r\\n                var args = [];\\r\\n                for (var x = 0; x < arguments.length; x += 1) {\\r\\n                    args.push(arguments[x]);\\r\\n                }\\r\\n                args.push(context);\\r\\n                return method.apply(context, args);\\r\\n            }\\r\\n            return method.apply(context, [null, context]);\\r\\n        };\\r\\n    }\\r\\n    /**\\r\\n    * Helper for creating a dialog close event.\\r\\n    * \\r\\n    * @return {object}\\r\\n    */\\r\\n    function createCloseEvent(index, button) {\\r\\n        return {\\r\\n            index: index,\\r\\n            button: button,\\r\\n            cancel: false\\r\\n        };\\r\\n    }\\r\\n    /**\\r\\n    * Helper for dispatching events.\\r\\n    *\\r\\n    * @param  {string} evenType The type of the event to disptach.\\r\\n    * @param  {object} instance The dialog instance disptaching the event.\\r\\n    *\\r\\n    * @return   {any}   The result of the invoked function.\\r\\n    */\\r\\n    function dispatchEvent(eventType, instance) {\\r\\n        if ( typeof instance.get(eventType) === 'function' ) {\\r\\n            return instance.get(eventType).call(instance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Super class for all dialogs\\r\\n     *\\r\\n     * @return {Object}\\t\\tbase dialog prototype\\r\\n     */\\r\\n    var dialog = (function () {\\r\\n        var //holds the list of used keys.\\r\\n            usedKeys = [],\\r\\n            //dummy variable, used to trigger dom reflow.\\r\\n            reflow = null,\\r\\n            //condition for detecting safari\\r\\n            isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,\\r\\n            //dialog building blocks\\r\\n            templates = {\\r\\n                dimmer:'<div class=\\\"ajs-dimmer\\\"></div>',\\r\\n                /*tab index required to fire click event before body focus*/\\r\\n                modal: '<div class=\\\"ajs-modal\\\" tabindex=\\\"0\\\"></div>',\\r\\n                dialog: '<div class=\\\"ajs-dialog\\\" tabindex=\\\"0\\\"></div>',\\r\\n                reset: '<button class=\\\"ajs-reset\\\"></button>',\\r\\n                commands: '<div class=\\\"ajs-commands\\\"><button class=\\\"ajs-pin\\\"></button><button class=\\\"ajs-maximize\\\"></button><button class=\\\"ajs-close\\\"></button></div>',\\r\\n                header: '<div class=\\\"ajs-header\\\"></div>',\\r\\n                body: '<div class=\\\"ajs-body\\\"></div>',\\r\\n                content: '<div class=\\\"ajs-content\\\"></div>',\\r\\n                footer: '<div class=\\\"ajs-footer\\\"></div>',\\r\\n                buttons: { primary: '<div class=\\\"ajs-primary ajs-buttons\\\"></div>', auxiliary: '<div class=\\\"ajs-auxiliary ajs-buttons\\\"></div>' },\\r\\n                button: '<button class=\\\"ajs-button\\\"></button>',\\r\\n                resizeHandle: '<div class=\\\"ajs-handle\\\"></div>',\\r\\n            },\\r\\n            //common class names\\r\\n            classes = {\\r\\n                animationIn: 'ajs-in',\\r\\n                animationOut: 'ajs-out',\\r\\n                base: 'alertify',\\r\\n                basic:'ajs-basic',\\r\\n                capture: 'ajs-capture',\\r\\n                closable:'ajs-closable',\\r\\n                fixed: 'ajs-fixed',\\r\\n                frameless:'ajs-frameless',\\r\\n                hidden: 'ajs-hidden',\\r\\n                maximize: 'ajs-maximize',\\r\\n                maximized: 'ajs-maximized',\\r\\n                maximizable:'ajs-maximizable',\\r\\n                modeless: 'ajs-modeless',\\r\\n                movable: 'ajs-movable',\\r\\n                noSelection: 'ajs-no-selection',\\r\\n                noOverflow: 'ajs-no-overflow',\\r\\n                noPadding:'ajs-no-padding',\\r\\n                pin:'ajs-pin',\\r\\n                pinnable:'ajs-pinnable',\\r\\n                prefix: 'ajs-',\\r\\n                resizable: 'ajs-resizable',\\r\\n                restore: 'ajs-restore',\\r\\n                shake:'ajs-shake',\\r\\n                unpinned:'ajs-unpinned',\\r\\n            };\\r\\n\\r\\n        /**\\r\\n         * Helper: initializes the dialog instance\\r\\n         * \\r\\n         * @return\\t{Number}\\tThe total count of currently open modals.\\r\\n         */\\r\\n        function initialize(instance){\\r\\n            \\r\\n            if(!instance.__internal){\\r\\n\\r\\n                //no need to expose init after this.\\r\\n                delete instance.__init;\\r\\n              \\r\\n                //keep a copy of initial dialog settings\\r\\n                if(!instance.__settings){\\r\\n                    instance.__settings = copy(instance.settings);\\r\\n                }\\r\\n                //in case the script was included before body.\\r\\n                //after first dialog gets initialized, it won't be null anymore!\\r\\n                if(null === reflow){\\r\\n                    // set tabindex attribute on body element this allows script to give it\\r\\n                    // focus after the dialog is closed\\r\\n                    document.body.setAttribute( 'tabindex', '0' );\\r\\n                }\\r\\n\\r\\n                //get dialog buttons/focus setup\\r\\n                var setup;\\r\\n                if(typeof instance.setup === 'function'){\\r\\n                    setup = instance.setup();\\r\\n                    setup.options = setup.options  || {};\\r\\n                    setup.focus = setup.focus  || {};\\r\\n                }else{\\r\\n                    setup = {\\r\\n                        buttons:[],\\r\\n                        focus:{\\r\\n                            element:null,\\r\\n                            select:false\\r\\n                        },\\r\\n                        options:{\\r\\n                        }\\r\\n                    };\\r\\n                }\\r\\n                \\r\\n                //initialize hooks object.\\r\\n                if(typeof instance.hooks !== 'object'){\\r\\n                    instance.hooks = {};\\r\\n                }\\r\\n\\r\\n                //copy buttons defintion\\r\\n                var buttonsDefinition = [];\\r\\n                if(Array.isArray(setup.buttons)){\\r\\n                    for(var b=0;b<setup.buttons.length;b+=1){\\r\\n                        var ref  = setup.buttons[b],\\r\\n                            cpy = {};\\r\\n                        for (var i in ref) {\\r\\n                            if (ref.hasOwnProperty(i)) {\\r\\n                                cpy[i] = ref[i];\\r\\n                            }\\r\\n                        }\\r\\n                        buttonsDefinition.push(cpy);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                var internal = instance.__internal = {\\r\\n                    /**\\r\\n                     * Flag holding the open state of the dialog\\r\\n                     * \\r\\n                     * @type {Boolean}\\r\\n                     */\\r\\n                    isOpen:false,\\r\\n                    /**\\r\\n                     * Active element is the element that will receive focus after\\r\\n                     * closing the dialog. It defaults as the body tag, but gets updated\\r\\n                     * to the last focused element before the dialog was opened.\\r\\n                     *\\r\\n                     * @type {Node}\\r\\n                     */\\r\\n                    activeElement:document.body,\\r\\n                    timerIn:undefined,\\r\\n                    timerOut:undefined,\\r\\n                    buttons: buttonsDefinition,\\r\\n                    focus: setup.focus,\\r\\n                    options: {\\r\\n                        title: undefined,\\r\\n                        modal: undefined,\\r\\n                        basic:undefined,\\r\\n                        frameless:undefined,\\r\\n                        pinned: undefined,\\r\\n                        movable: undefined,\\r\\n                        moveBounded:undefined,\\r\\n                        resizable: undefined,\\r\\n                        autoReset: undefined,\\r\\n                        closable: undefined,\\r\\n                        closableByDimmer: undefined,\\r\\n                        maximizable: undefined,\\r\\n                        startMaximized: undefined,\\r\\n                        pinnable: undefined,\\r\\n                        transition: undefined,\\r\\n                        padding:undefined,\\r\\n                        overflow:undefined,\\r\\n                        onshow:undefined,\\r\\n                        onclosing:undefined,\\r\\n                        onclose:undefined,\\r\\n                        onfocus:undefined,\\r\\n                        onmove:undefined,\\r\\n                        onmoved:undefined,\\r\\n                        onresize:undefined,\\r\\n                        onresized:undefined,\\r\\n                        onmaximize:undefined,\\r\\n                        onmaximized:undefined,\\r\\n                        onrestore:undefined,\\r\\n                        onrestored:undefined\\r\\n                    },\\r\\n                    resetHandler:undefined,\\r\\n                    beginMoveHandler:undefined,\\r\\n                    beginResizeHandler:undefined,\\r\\n                    bringToFrontHandler:undefined,\\r\\n                    modalClickHandler:undefined,\\r\\n                    buttonsClickHandler:undefined,\\r\\n                    commandsClickHandler:undefined,\\r\\n                    transitionInHandler:undefined,\\r\\n                    transitionOutHandler:undefined,\\r\\n                    destroy:undefined\\r\\n                };\\r\\n\\r\\n                var elements = {};\\r\\n                //root node\\r\\n                elements.root = document.createElement('div');\\r\\n                \\r\\n                elements.root.className = classes.base + ' ' + classes.hidden + ' ';\\r\\n\\r\\n                elements.root.innerHTML = templates.dimmer + templates.modal;\\r\\n                \\r\\n                //dimmer\\r\\n                elements.dimmer = elements.root.firstChild;\\r\\n\\r\\n                //dialog\\r\\n                elements.modal = elements.root.lastChild;\\r\\n                elements.modal.innerHTML = templates.dialog;\\r\\n                elements.dialog = elements.modal.firstChild;\\r\\n                elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;\\r\\n\\r\\n                //reset links\\r\\n                elements.reset = [];\\r\\n                elements.reset.push(elements.dialog.firstChild);\\r\\n                elements.reset.push(elements.dialog.lastChild);\\r\\n                \\r\\n                //commands\\r\\n                elements.commands = {};\\r\\n                elements.commands.container = elements.reset[0].nextSibling;\\r\\n                elements.commands.pin = elements.commands.container.firstChild;\\r\\n                elements.commands.maximize = elements.commands.pin.nextSibling;\\r\\n                elements.commands.close = elements.commands.maximize.nextSibling;\\r\\n                \\r\\n                //header\\r\\n                elements.header = elements.commands.container.nextSibling;\\r\\n\\r\\n                //body\\r\\n                elements.body = elements.header.nextSibling;\\r\\n                elements.body.innerHTML = templates.content;\\r\\n                elements.content = elements.body.firstChild;\\r\\n\\r\\n                //footer\\r\\n                elements.footer = elements.body.nextSibling;\\r\\n                elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;\\r\\n                \\r\\n                //resize handle\\r\\n                elements.resizeHandle = elements.footer.nextSibling;\\r\\n\\r\\n                //buttons\\r\\n                elements.buttons = {};\\r\\n                elements.buttons.auxiliary = elements.footer.firstChild;\\r\\n                elements.buttons.primary = elements.buttons.auxiliary.nextSibling;\\r\\n                elements.buttons.primary.innerHTML = templates.button;\\r\\n                elements.buttonTemplate = elements.buttons.primary.firstChild;\\r\\n                //remove button template\\r\\n                elements.buttons.primary.removeChild(elements.buttonTemplate);\\r\\n                               \\r\\n                for(var x=0; x < instance.__internal.buttons.length; x+=1) {\\r\\n                    var button = instance.__internal.buttons[x];\\r\\n                    \\r\\n                    // add to the list of used keys.\\r\\n                    if(usedKeys.indexOf(button.key) < 0){\\r\\n                        usedKeys.push(button.key);\\r\\n                    }\\r\\n\\r\\n                    button.element = elements.buttonTemplate.cloneNode();\\r\\n                    button.element.innerHTML = button.text;\\r\\n                    if(typeof button.className === 'string' &&  button.className !== ''){\\r\\n                        addClass(button.element, button.className);\\r\\n                    }\\r\\n                    for(var key in button.attrs){\\r\\n                        if(key !== 'className' && button.attrs.hasOwnProperty(key)){\\r\\n                            button.element.setAttribute(key, button.attrs[key]);\\r\\n                        }\\r\\n                    }\\r\\n                    if(button.scope === 'auxiliary'){\\r\\n                        elements.buttons.auxiliary.appendChild(button.element);\\r\\n                    }else{\\r\\n                        elements.buttons.primary.appendChild(button.element);\\r\\n                    }\\r\\n                }\\r\\n                //make elements pubic\\r\\n                instance.elements = elements;\\r\\n                \\r\\n                //save event handlers delegates\\r\\n                internal.resetHandler = delegate(instance, onReset);\\r\\n                internal.beginMoveHandler = delegate(instance, beginMove);\\r\\n                internal.beginResizeHandler = delegate(instance, beginResize);\\r\\n                internal.bringToFrontHandler = delegate(instance, bringToFront);\\r\\n                internal.modalClickHandler = delegate(instance, modalClickHandler);\\r\\n                internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);\\r\\n                internal.commandsClickHandler = delegate(instance, commandsClickHandler);\\r\\n                internal.transitionInHandler = delegate(instance, handleTransitionInEvent);\\r\\n                internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);\\r\\n\\r\\n                //settings\\r\\n                for(var opKey in internal.options){\\r\\n                    if(setup.options[opKey] !== undefined){\\r\\n                        // if found in user options\\r\\n                        instance.set(opKey, setup.options[opKey]);\\r\\n                    }else if(alertify.defaults.hasOwnProperty(opKey)) {\\r\\n                        // else if found in defaults options\\r\\n                        instance.set(opKey, alertify.defaults[opKey]);\\r\\n                    }else if(opKey === 'title' ) {\\r\\n                        // else if title key, use alertify.defaults.glossary\\r\\n                        instance.set(opKey, alertify.defaults.glossary[opKey]);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                // allow dom customization\\r\\n                if(typeof instance.build === 'function'){\\r\\n                    instance.build();\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            //add to the end of the DOM tree.\\r\\n            document.body.appendChild(instance.elements.root);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Helper: maintains scroll position\\r\\n         *\\r\\n         */\\r\\n        var scrollX, scrollY;\\r\\n        function saveScrollPosition(){\\r\\n            scrollX = getScrollLeft();\\r\\n            scrollY = getScrollTop();\\r\\n        }\\r\\n        function restoreScrollPosition(){\\r\\n            window.scrollTo(scrollX, scrollY);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Helper: adds/removes no-overflow class from body\\r\\n         *\\r\\n         */\\r\\n        function ensureNoOverflow(){\\r\\n            var requiresNoOverflow = 0;\\r\\n            for(var x=0;x<openDialogs.length;x+=1){\\r\\n                var instance = openDialogs[x];\\r\\n                if(instance.isModal() || instance.isMaximized()){\\r\\n                    requiresNoOverflow+=1;\\r\\n                }\\r\\n            }\\r\\n            if(requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0){\\r\\n                //last open modal or last maximized one\\r\\n                removeClass(document.body, classes.noOverflow);\\r\\n                preventBodyShift(false);\\r\\n            }else if(requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0){\\r\\n                //first open modal or first maximized one\\r\\n                preventBodyShift(true);\\r\\n                addClass(document.body, classes.noOverflow);\\r\\n            }\\r\\n        }\\r\\n        var top = '', topScroll = 0;\\r\\n        /**\\r\\n         * Helper: prevents body shift.\\r\\n         *\\r\\n         */\\r\\n        function preventBodyShift(add){\\r\\n            if(alertify.defaults.preventBodyShift && document.documentElement.scrollHeight > document.documentElement.clientHeight){\\r\\n                if(add ){//&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){\\r\\n                    topScroll = scrollY;\\r\\n                    top = window.getComputedStyle(document.body).top;\\r\\n                    addClass(document.body, classes.fixed);\\r\\n                    document.body.style.top = -scrollY + 'px';\\r\\n                } else {\\r\\n                    scrollY = topScroll;\\r\\n                    document.body.style.top = top;\\r\\n                    removeClass(document.body, classes.fixed);\\r\\n                    restoreScrollPosition();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\t\\t\\r\\n        /**\\r\\n         * Sets the name of the transition used to show/hide the dialog\\r\\n         * \\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         */\\r\\n        function updateTransition(instance, value, oldValue){\\r\\n            if(typeof oldValue === 'string'){\\r\\n                removeClass(instance.elements.root,classes.prefix +  oldValue);\\r\\n            }\\r\\n            addClass(instance.elements.root, classes.prefix + value);\\r\\n            reflow = instance.elements.root.offsetWidth;\\r\\n        }\\r\\n\\t\\t\\r\\n        /**\\r\\n         * Toggles the dialog display mode\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function updateDisplayMode(instance){\\r\\n            if(instance.get('modal')){\\r\\n\\r\\n                //make modal\\r\\n                removeClass(instance.elements.root, classes.modeless);\\r\\n\\r\\n                //only if open\\r\\n                if(instance.isOpen()){\\r\\n                    unbindModelessEvents(instance);\\r\\n\\r\\n                    //in case a pinned modless dialog was made modal while open.\\r\\n                    updateAbsPositionFix(instance);\\r\\n\\r\\n                    ensureNoOverflow();\\r\\n                }\\r\\n            }else{\\r\\n                //make modelss\\r\\n                addClass(instance.elements.root, classes.modeless);\\r\\n\\r\\n                //only if open\\r\\n                if(instance.isOpen()){\\r\\n                    bindModelessEvents(instance);\\r\\n\\r\\n                    //in case pin/unpin was called while a modal is open\\r\\n                    updateAbsPositionFix(instance);\\r\\n\\r\\n                    ensureNoOverflow();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Toggles the dialog basic view mode \\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function updateBasicMode(instance){\\r\\n            if (instance.get('basic')) {\\r\\n                // add class\\r\\n                addClass(instance.elements.root, classes.basic);\\r\\n            } else {\\r\\n                // remove class\\r\\n                removeClass(instance.elements.root, classes.basic);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Toggles the dialog frameless view mode \\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function updateFramelessMode(instance){\\r\\n            if (instance.get('frameless')) {\\r\\n                // add class\\r\\n                addClass(instance.elements.root, classes.frameless);\\r\\n            } else {\\r\\n                // remove class\\r\\n                removeClass(instance.elements.root, classes.frameless);\\r\\n            }\\r\\n        }\\r\\n\\t\\t\\r\\n        /**\\r\\n         * Helper: Brings the modeless dialog to front, attached to modeless dialogs.\\r\\n         *\\r\\n         * @param {Event} event Focus event\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function bringToFront(event, instance){\\r\\n            \\r\\n            // Do not bring to front if preceeded by an open modal\\r\\n            var index = openDialogs.indexOf(instance);\\r\\n            for(var x=index+1;x<openDialogs.length;x+=1){\\r\\n                if(openDialogs[x].isModal()){\\r\\n                    return;\\r\\n                }\\r\\n            }\\r\\n\\t\\t\\t\\r\\n            // Bring to front by making it the last child.\\r\\n            if(document.body.lastChild !== instance.elements.root){\\r\\n                document.body.appendChild(instance.elements.root);\\r\\n                //also make sure its at the end of the list\\r\\n                openDialogs.splice(openDialogs.indexOf(instance),1);\\r\\n                openDialogs.push(instance);\\r\\n                setFocus(instance);\\r\\n            }\\r\\n\\t\\t\\t\\r\\n            return false;\\r\\n        }\\r\\n\\t\\t\\r\\n        /**\\r\\n         * Helper: reflects dialogs options updates\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         * @param {String} option The updated option name.\\r\\n         *\\r\\n         * @return\\t{undefined}\\t\\r\\n         */\\r\\n        function optionUpdated(instance, option, oldValue, newValue){\\r\\n            switch(option){\\r\\n            case 'title':\\r\\n                instance.setHeader(newValue);\\r\\n                break;\\r\\n            case 'modal':\\r\\n                updateDisplayMode(instance);\\r\\n                break;\\r\\n            case 'basic':\\r\\n                updateBasicMode(instance);\\r\\n                break;\\r\\n            case 'frameless':\\r\\n                updateFramelessMode(instance);\\r\\n                break;\\r\\n            case 'pinned':\\r\\n                updatePinned(instance);\\r\\n                break;\\r\\n            case 'closable':\\r\\n                updateClosable(instance);\\r\\n                break;\\r\\n            case 'maximizable':\\r\\n                updateMaximizable(instance);\\r\\n                break;\\r\\n            case 'pinnable':\\r\\n                updatePinnable(instance);\\r\\n                break;\\r\\n            case 'movable':\\r\\n                updateMovable(instance);\\r\\n                break;\\r\\n            case 'resizable':\\r\\n                updateResizable(instance);\\r\\n                break;\\r\\n            case 'transition':\\r\\n                updateTransition(instance,newValue, oldValue);\\r\\n                break;\\r\\n            case 'padding':\\r\\n                if(newValue){\\r\\n                    removeClass(instance.elements.root, classes.noPadding);\\r\\n                }else if(instance.elements.root.className.indexOf(classes.noPadding) < 0){\\r\\n                    addClass(instance.elements.root, classes.noPadding);\\r\\n                }\\r\\n                break;\\r\\n            case 'overflow':\\r\\n                if(newValue){\\r\\n                    removeClass(instance.elements.root, classes.noOverflow);\\r\\n                }else if(instance.elements.root.className.indexOf(classes.noOverflow) < 0){\\r\\n                    addClass(instance.elements.root, classes.noOverflow);\\r\\n                }\\r\\n                break;\\r\\n            case 'transition':\\r\\n                updateTransition(instance,newValue, oldValue);\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            // internal on option updated event\\r\\n            if(typeof instance.hooks.onupdate === 'function'){\\r\\n                instance.hooks.onupdate.call(instance, option, oldValue, newValue);\\r\\n            }\\r\\n        }\\r\\n\\t\\t\\r\\n        /**\\r\\n         * Helper: reflects dialogs options updates\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         * @param {Object} obj The object to set/get a value on/from.\\r\\n         * @param {Function} callback The callback function to call if the key was found.\\r\\n         * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.\\r\\n         * @param {Object} value Optional, the value associated with the key (in case it was a string).\\r\\n         * @param {String} option The updated option name.\\r\\n         *\\r\\n         * @return\\t{Object} result object \\r\\n         *\\tThe result objects has an 'op' property, indicating of this is a SET or GET operation.\\r\\n         *\\t\\tGET: \\r\\n         *\\t\\t- found: a flag indicating if the key was found or not.\\r\\n         *\\t\\t- value: the property value.\\r\\n         *\\t\\tSET:\\r\\n         *\\t\\t- items: a list of key value pairs of the properties being set.\\r\\n         *\\t\\t\\t\\teach contains:\\r\\n         *\\t\\t\\t\\t\\t- found: a flag indicating if the key was found or not.\\r\\n         *\\t\\t\\t\\t\\t- key: the property key.\\r\\n         *\\t\\t\\t\\t\\t- value: the property value.\\r\\n         */\\r\\n        function update(instance, obj, callback, key, value){\\r\\n            var result = {op:undefined, items: [] };\\r\\n            if(typeof value === 'undefined' && typeof key === 'string') {\\r\\n                //get\\r\\n                result.op = 'get';\\r\\n                if(obj.hasOwnProperty(key)){\\r\\n                    result.found = true;\\r\\n                    result.value = obj[key];\\r\\n                }else{\\r\\n                    result.found = false;\\r\\n                    result.value = undefined;\\r\\n                }\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                var old;\\r\\n                //set\\r\\n                result.op = 'set';\\r\\n                if(typeof key === 'object'){\\r\\n                    //set multiple\\r\\n                    var args = key;\\r\\n                    for (var prop in args) {\\r\\n                        if (obj.hasOwnProperty(prop)) {\\r\\n                            if(obj[prop] !== args[prop]){\\r\\n                                old = obj[prop];\\r\\n                                obj[prop] = args[prop];\\r\\n                                callback.call(instance,prop, old, args[prop]);\\r\\n                            }\\r\\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':true});\\r\\n                        }else{\\r\\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':false});\\r\\n                        }\\r\\n                    }\\r\\n                } else if (typeof key === 'string'){\\r\\n                    //set single\\r\\n                    if (obj.hasOwnProperty(key)) {\\r\\n                        if(obj[key] !== value){\\r\\n                            old  = obj[key];\\r\\n                            obj[key] = value;\\r\\n                            callback.call(instance,key, old, value);\\r\\n                        }\\r\\n                        result.items.push({'key': key, 'value': value , 'found':true});\\r\\n\\r\\n                    }else{\\r\\n                        result.items.push({'key': key, 'value': value , 'found':false});\\r\\n                    }\\r\\n                } else {\\r\\n                    //invalid params\\r\\n                    throw new Error('args must be a string or object');\\r\\n                }\\r\\n            }\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n\\r\\n        /**\\r\\n         * Triggers a close event.\\r\\n         *\\r\\n         * @param {Object} instance\\tThe dilog instance.\\r\\n         * \\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function triggerClose(instance) {\\r\\n            var found;\\r\\n            triggerCallback(instance, function (button) {\\r\\n                return found = (button.invokeOnClose === true);\\r\\n            });\\r\\n            //none of the buttons registered as onclose callback\\r\\n            //close the dialog\\r\\n            if (!found && instance.isOpen()) {\\r\\n                instance.close();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Dialogs commands event handler, attached to the dialog commands element.\\r\\n         *\\r\\n         * @param {Event} event\\tDOM event object.\\r\\n         * @param {Object} instance\\tThe dilog instance.\\r\\n         * \\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function commandsClickHandler(event, instance) {\\r\\n            var target = event.srcElement || event.target;\\r\\n            switch (target) {\\r\\n            case instance.elements.commands.pin:\\r\\n                if (!instance.isPinned()) {\\r\\n                    pin(instance);\\r\\n                } else {\\r\\n                    unpin(instance);\\r\\n                }\\r\\n                break;\\r\\n            case instance.elements.commands.maximize:\\r\\n                if (!instance.isMaximized()) {\\r\\n                    maximize(instance);\\r\\n                } else {\\r\\n                    restore(instance);\\r\\n                }\\r\\n                break;\\r\\n            case instance.elements.commands.close:\\r\\n                triggerClose(instance);\\r\\n                break;\\r\\n            }\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Helper: pins the modeless dialog.\\r\\n         *\\r\\n         * @param {Object} instance\\tThe dialog instance.\\r\\n         * \\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function pin(instance) {\\r\\n            //pin the dialog\\r\\n            instance.set('pinned', true);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Helper: unpins the modeless dialog.\\r\\n         *\\r\\n         * @param {Object} instance\\tThe dilog instance.\\r\\n         * \\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function unpin(instance) {\\r\\n            //unpin the dialog \\r\\n            instance.set('pinned', false);\\r\\n        }\\r\\n\\r\\n\\r\\n        /**\\r\\n         * Helper: enlarges the dialog to fill the entire screen.\\r\\n         *\\r\\n         * @param {Object} instance\\tThe dilog instance.\\r\\n         * \\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function maximize(instance) {\\r\\n            // allow custom `onmaximize` method\\r\\n            dispatchEvent('onmaximize', instance);\\r\\n            //maximize the dialog \\r\\n            addClass(instance.elements.root, classes.maximized);\\r\\n            if (instance.isOpen()) {\\r\\n                ensureNoOverflow();\\r\\n            }\\r\\n            // allow custom `onmaximized` method\\r\\n            dispatchEvent('onmaximized', instance);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Helper: returns the dialog to its former size.\\r\\n         *\\r\\n         * @param {Object} instance\\tThe dilog instance.\\r\\n         * \\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function restore(instance) {\\r\\n            // allow custom `onrestore` method\\r\\n            dispatchEvent('onrestore', instance);\\r\\n            //maximize the dialog \\r\\n            removeClass(instance.elements.root, classes.maximized);\\r\\n            if (instance.isOpen()) {\\r\\n                ensureNoOverflow();\\r\\n            }\\r\\n            // allow custom `onrestored` method\\r\\n            dispatchEvent('onrestored', instance);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Show or hide the maximize box.\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function updatePinnable(instance) {\\r\\n            if (instance.get('pinnable')) {\\r\\n                // add class\\r\\n                addClass(instance.elements.root, classes.pinnable);\\r\\n            } else {\\r\\n                // remove class\\r\\n                removeClass(instance.elements.root, classes.pinnable);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Helper: Fixes the absolutly positioned modal div position.\\r\\n         *\\r\\n         * @param {Object} instance The dialog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function addAbsPositionFix(instance) {\\r\\n            var scrollLeft = getScrollLeft();\\r\\n            instance.elements.modal.style.marginTop = getScrollTop() + 'px';\\r\\n            instance.elements.modal.style.marginLeft = scrollLeft + 'px';\\r\\n            instance.elements.modal.style.marginRight = (-scrollLeft) + 'px';\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Helper: Removes the absolutly positioned modal div position fix.\\r\\n         *\\r\\n         * @param {Object} instance The dialog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function removeAbsPositionFix(instance) {\\r\\n            var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);\\r\\n            var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);\\r\\n            instance.elements.modal.style.marginTop = '';\\r\\n            instance.elements.modal.style.marginLeft = '';\\r\\n            instance.elements.modal.style.marginRight = '';\\r\\n\\r\\n            if (instance.isOpen()) {\\r\\n                var top = 0,\\r\\n                    left = 0\\r\\n                ;\\r\\n                if (instance.elements.dialog.style.top !== '') {\\r\\n                    top = parseInt(instance.elements.dialog.style.top, 10);\\r\\n                }\\r\\n                instance.elements.dialog.style.top = (top + (marginTop - getScrollTop())) + 'px';\\r\\n\\r\\n                if (instance.elements.dialog.style.left !== '') {\\r\\n                    left = parseInt(instance.elements.dialog.style.left, 10);\\r\\n                }\\r\\n                instance.elements.dialog.style.left = (left + (marginLeft - getScrollLeft())) + 'px';\\r\\n            }\\r\\n        }\\r\\n        /**\\r\\n         * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.\\r\\n         *\\r\\n         * @param {Object} instance The dialog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function updateAbsPositionFix(instance) {\\r\\n            // if modeless and unpinned add fix\\r\\n            if (!instance.get('modal') && !instance.get('pinned')) {\\r\\n                addAbsPositionFix(instance);\\r\\n            } else {\\r\\n                removeAbsPositionFix(instance);\\r\\n            }\\r\\n        }\\r\\n        /**\\r\\n         * Toggles the dialog position lock | modeless only.\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         * @param {Boolean} on True to make it modal, false otherwise.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function updatePinned(instance) {\\r\\n            if (instance.get('pinned')) {\\r\\n                removeClass(instance.elements.root, classes.unpinned);\\r\\n                if (instance.isOpen()) {\\r\\n                    removeAbsPositionFix(instance);\\r\\n                }\\r\\n            } else {\\r\\n                addClass(instance.elements.root, classes.unpinned);\\r\\n                if (instance.isOpen() && !instance.isModal()) {\\r\\n                    addAbsPositionFix(instance);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Show or hide the maximize box.\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function updateMaximizable(instance) {\\r\\n            if (instance.get('maximizable')) {\\r\\n                // add class\\r\\n                addClass(instance.elements.root, classes.maximizable);\\r\\n            } else {\\r\\n                // remove class\\r\\n                removeClass(instance.elements.root, classes.maximizable);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Show or hide the close box.\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function updateClosable(instance) {\\r\\n            if (instance.get('closable')) {\\r\\n                // add class\\r\\n                addClass(instance.elements.root, classes.closable);\\r\\n                bindClosableEvents(instance);\\r\\n            } else {\\r\\n                // remove class\\r\\n                removeClass(instance.elements.root, classes.closable);\\r\\n                unbindClosableEvents(instance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).\\r\\n        var cancelClick = false;\\r\\n\\r\\n        /**\\r\\n         * Helper: closes the modal dialog when clicking the modal\\r\\n         *\\r\\n         * @param {Event} event\\tDOM event object.\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function modalClickHandler(event, instance) {\\r\\n            var target = event.srcElement || event.target;\\r\\n            if (!cancelClick && target === instance.elements.modal && instance.get('closableByDimmer') === true) {\\r\\n                triggerClose(instance);\\r\\n            }\\r\\n            cancelClick = false;\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).\\r\\n        var cancelKeyup = false;\\r\\n        /** \\r\\n         * Helper: triggers a button callback\\r\\n         *\\r\\n         * @param {Object}\\t\\tThe dilog instance.\\r\\n         * @param {Function}\\tCallback to check which button triggered the event.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function triggerCallback(instance, check) {\\r\\n            for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {\\r\\n                var button = instance.__internal.buttons[idx];\\r\\n                if (!button.element.disabled && check(button)) {\\r\\n                    var closeEvent = createCloseEvent(idx, button);\\r\\n                    if (typeof instance.callback === 'function') {\\r\\n                        instance.callback.apply(instance, [closeEvent]);\\r\\n                    }\\r\\n                    //close the dialog only if not canceled.\\r\\n                    if (closeEvent.cancel === false) {\\r\\n                        instance.close();\\r\\n                    }\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Clicks event handler, attached to the dialog footer.\\r\\n         *\\r\\n         * @param {Event}\\t\\tDOM event object.\\r\\n         * @param {Object}\\t\\tThe dilog instance.\\r\\n         * \\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function buttonsClickHandler(event, instance) {\\r\\n            var target = event.srcElement || event.target;\\r\\n            triggerCallback(instance, function (button) {\\r\\n                // if this button caused the click, cancel keyup event\\r\\n                return button.element === target && (cancelKeyup = true);\\r\\n            });\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Keyup event handler, attached to the document.body\\r\\n         *\\r\\n         * @param {Event}\\t\\tDOM event object.\\r\\n         * @param {Object}\\t\\tThe dilog instance.\\r\\n         * \\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function keyupHandler(event) {\\r\\n            //hitting enter while button has focus will trigger keyup too.\\r\\n            //ignore if handled by clickHandler\\r\\n            if (cancelKeyup) {\\r\\n                cancelKeyup = false;\\r\\n                return;\\r\\n            }\\r\\n            var instance = openDialogs[openDialogs.length - 1];\\r\\n            var keyCode = event.keyCode;\\r\\n            if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {\\r\\n                triggerClose(instance);\\r\\n                return false;\\r\\n            }else if (usedKeys.indexOf(keyCode) > -1) {\\r\\n                triggerCallback(instance, function (button) {\\r\\n                    return button.key === keyCode;\\r\\n                });\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        /**\\r\\n        * Keydown event handler, attached to the document.body\\r\\n        *\\r\\n        * @param {Event}\\t\\tDOM event object.\\r\\n        * @param {Object}\\t\\tThe dilog instance.\\r\\n        * \\r\\n        * @return {undefined}\\r\\n        */\\r\\n        function keydownHandler(event) {\\r\\n            var instance = openDialogs[openDialogs.length - 1];\\r\\n            var keyCode = event.keyCode;\\r\\n            if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {\\r\\n                var buttons = instance.__internal.buttons;\\r\\n                for (var x = 0; x < buttons.length; x += 1) {\\r\\n                    if (document.activeElement === buttons[x].element) {\\r\\n                        switch (keyCode) {\\r\\n                        case keys.LEFT:\\r\\n                            buttons[(x || buttons.length) - 1].element.focus();\\r\\n                            return;\\r\\n                        case keys.RIGHT:\\r\\n                            buttons[(x + 1) % buttons.length].element.focus();\\r\\n                            return;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {\\r\\n                event.preventDefault();\\r\\n                event.stopPropagation();\\r\\n                triggerCallback(instance, function (button) {\\r\\n                    return button.key === keyCode;\\r\\n                });\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        /**\\r\\n         * Sets focus to proper dialog element\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         * @param {Node} [resetTarget=undefined] DOM element to reset focus to.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function setFocus(instance, resetTarget) {\\r\\n            // reset target has already been determined.\\r\\n            if (resetTarget) {\\r\\n                resetTarget.focus();\\r\\n            } else {\\r\\n                // current instance focus settings\\r\\n                var focus = instance.__internal.focus;\\r\\n                // the focus element.\\r\\n                var element = focus.element;\\r\\n\\r\\n                switch (typeof focus.element) {\\r\\n                // a number means a button index\\r\\n                case 'number':\\r\\n                    if (instance.__internal.buttons.length > focus.element) {\\r\\n                        //in basic view, skip focusing the buttons.\\r\\n                        if (instance.get('basic') === true) {\\r\\n                            element = instance.elements.reset[0];\\r\\n                        } else {\\r\\n                            element = instance.__internal.buttons[focus.element].element;\\r\\n                        }\\r\\n                    }\\r\\n                    break;\\r\\n                // a string means querySelector to select from dialog body contents.\\r\\n                case 'string':\\r\\n                    element = instance.elements.body.querySelector(focus.element);\\r\\n                    break;\\r\\n                // a function should return the focus element.\\r\\n                case 'function':\\r\\n                    element = focus.element.call(instance);\\r\\n                    break;\\r\\n                }\\r\\n                \\r\\n                // if no focus element, default to first reset element.\\r\\n                if ((typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0) {\\r\\n                    element = instance.elements.reset[0];\\r\\n                }\\r\\n                // focus\\r\\n                if (element && element.focus) {\\r\\n                    element.focus();\\r\\n                    // if selectable\\r\\n                    if (focus.select && element.select) {\\r\\n                        element.select();\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Focus event handler, attached to document.body and dialogs own reset links.\\r\\n         * handles the focus for modal dialogs only.\\r\\n         *\\r\\n         * @param {Event} event DOM focus event object.\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function onReset(event, instance) {\\r\\n\\r\\n            // should work on last modal if triggered from document.body \\r\\n            if (!instance) {\\r\\n                for (var x = openDialogs.length - 1; x > -1; x -= 1) {\\r\\n                    if (openDialogs[x].isModal()) {\\r\\n                        instance = openDialogs[x];\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            // if modal\\r\\n            if (instance && instance.isModal()) {\\r\\n                // determine reset target to enable forward/backward tab cycle.\\r\\n                var resetTarget, target = event.srcElement || event.target;\\r\\n                var lastResetElement = target === instance.elements.reset[1] || (instance.__internal.buttons.length === 0 && target === document.body);\\r\\n\\r\\n                // if last reset link, then go to maximize or close\\r\\n                if (lastResetElement) {\\r\\n                    if (instance.get('maximizable')) {\\r\\n                        resetTarget = instance.elements.commands.maximize;\\r\\n                    } else if (instance.get('closable')) {\\r\\n                        resetTarget = instance.elements.commands.close;\\r\\n                    }\\r\\n                }\\r\\n                // if no reset target found, try finding the best button\\r\\n                if (resetTarget === undefined) {\\r\\n                    if (typeof instance.__internal.focus.element === 'number') {\\r\\n                        // button focus element, go to first available button\\r\\n                        if (target === instance.elements.reset[0]) {\\r\\n                            resetTarget = instance.elements.buttons.auxiliary.firstChild || instance.elements.buttons.primary.firstChild;\\r\\n                        } else if (lastResetElement) {\\r\\n                            //restart the cycle by going to first reset link\\r\\n                            resetTarget = instance.elements.reset[0];\\r\\n                        }\\r\\n                    } else {\\r\\n                        // will reach here when tapping backwards, so go to last child\\r\\n                        // The focus element SHOULD NOT be a button (logically!).\\r\\n                        if (target === instance.elements.reset[0]) {\\r\\n                            resetTarget = instance.elements.buttons.primary.lastChild || instance.elements.buttons.auxiliary.lastChild;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n                // focus\\r\\n                setFocus(instance, resetTarget);\\r\\n            }\\r\\n        }\\r\\n        /**\\r\\n         * Transition in transitionend event handler. \\r\\n         *\\r\\n         * @param {Event}\\t\\tTransitionEnd event object.\\r\\n         * @param {Object}\\t\\tThe dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function handleTransitionInEvent(event, instance) {\\r\\n            // clear the timer\\r\\n            clearTimeout(instance.__internal.timerIn);\\r\\n\\r\\n            // once transition is complete, set focus\\r\\n            setFocus(instance);\\r\\n\\r\\n            //restore scroll to prevent document jump\\r\\n            restoreScrollPosition();\\r\\n\\r\\n            // allow handling key up after transition ended.\\r\\n            cancelKeyup = false;\\r\\n\\r\\n            // allow custom `onfocus` method\\r\\n            dispatchEvent('onfocus', instance);\\r\\n\\r\\n            // unbind the event\\r\\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\\r\\n\\r\\n            removeClass(instance.elements.root, classes.animationIn);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Transition out transitionend event handler. \\r\\n         *\\r\\n         * @param {Event}\\t\\tTransitionEnd event object.\\r\\n         * @param {Object}\\t\\tThe dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function handleTransitionOutEvent(event, instance) {\\r\\n            // clear the timer\\r\\n            clearTimeout(instance.__internal.timerOut);\\r\\n            // unbind the event\\r\\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\\r\\n\\r\\n            // reset move updates\\r\\n            resetMove(instance);\\r\\n            // reset resize updates\\r\\n            resetResize(instance);\\r\\n\\r\\n            // restore if maximized\\r\\n            if (instance.isMaximized() && !instance.get('startMaximized')) {\\r\\n                restore(instance);\\r\\n            }\\r\\n\\r\\n            // return focus to the last active element\\r\\n            if (alertify.defaults.maintainFocus && instance.__internal.activeElement) {\\r\\n                instance.__internal.activeElement.focus();\\r\\n                instance.__internal.activeElement = null;\\r\\n            }\\r\\n            \\r\\n            //destory the instance\\r\\n            if (typeof instance.__internal.destroy === 'function') {\\r\\n                instance.__internal.destroy.apply(instance);\\r\\n            }\\r\\n        }\\r\\n        /* Controls moving a dialog around */\\r\\n        //holde the current moving instance\\r\\n        var movable = null,\\r\\n            //holds the current X offset when move starts\\r\\n            offsetX = 0,\\r\\n            //holds the current Y offset when move starts\\r\\n            offsetY = 0,\\r\\n            xProp = 'pageX',\\r\\n            yProp = 'pageY',\\r\\n            bounds = null,\\r\\n            refreshTop = false,\\r\\n            moveDelegate = null\\r\\n        ;\\r\\n\\r\\n        /**\\r\\n         * Helper: sets the element top/left coordinates\\r\\n         *\\r\\n         * @param {Event} event\\tDOM event object.\\r\\n         * @param {Node} element The element being moved.\\r\\n         * \\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function moveElement(event, element) {\\r\\n            var left = (event[xProp] - offsetX),\\r\\n                top  = (event[yProp] - offsetY);\\r\\n\\r\\n            if(refreshTop){\\r\\n                top -= document.body.scrollTop;\\r\\n            }\\r\\n           \\r\\n            element.style.left = left + 'px';\\r\\n            element.style.top = top + 'px';\\r\\n           \\r\\n        }\\r\\n        /**\\r\\n         * Helper: sets the element top/left coordinates within screen bounds\\r\\n         *\\r\\n         * @param {Event} event\\tDOM event object.\\r\\n         * @param {Node} element The element being moved.\\r\\n         * \\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function moveElementBounded(event, element) {\\r\\n            var left = (event[xProp] - offsetX),\\r\\n                top  = (event[yProp] - offsetY);\\r\\n\\r\\n            if(refreshTop){\\r\\n                top -= document.body.scrollTop;\\r\\n            }\\r\\n            \\r\\n            element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';\\r\\n            if(refreshTop){\\r\\n                element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';\\r\\n            }else{\\r\\n                element.style.top = Math.max(bounds.minTop, top) + 'px';\\r\\n            }\\r\\n        }\\r\\n            \\r\\n\\r\\n        /**\\r\\n         * Triggers the start of a move event, attached to the header element mouse down event.\\r\\n         * Adds no-selection class to the body, disabling selection while moving.\\r\\n         *\\r\\n         * @param {Event} event\\tDOM event object.\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         * \\r\\n         * @return {Boolean} false\\r\\n         */\\r\\n        function beginMove(event, instance) {\\r\\n            if (resizable === null && !instance.isMaximized() && instance.get('movable')) {\\r\\n                var eventSrc, left=0, top=0;\\r\\n                if (event.type === 'touchstart') {\\r\\n                    event.preventDefault();\\r\\n                    eventSrc = event.targetTouches[0];\\r\\n                    xProp = 'clientX';\\r\\n                    yProp = 'clientY';\\r\\n                } else if (event.button === 0) {\\r\\n                    eventSrc = event;\\r\\n                }\\r\\n\\r\\n                if (eventSrc) {\\r\\n\\r\\n                    var element = instance.elements.dialog;\\r\\n                    addClass(element, classes.capture);\\r\\n\\r\\n                    if (element.style.left) {\\r\\n                        left = parseInt(element.style.left, 10);\\r\\n                    }\\r\\n\\r\\n                    if (element.style.top) {\\r\\n                        top = parseInt(element.style.top, 10);\\r\\n                    }\\r\\n                    \\r\\n                    offsetX = eventSrc[xProp] - left;\\r\\n                    offsetY = eventSrc[yProp] - top;\\r\\n\\r\\n                    if(instance.isModal()){\\r\\n                        offsetY += instance.elements.modal.scrollTop;\\r\\n                    }else if(instance.isPinned()){\\r\\n                        offsetY -= document.body.scrollTop;\\r\\n                    }\\r\\n                    \\r\\n                    if(instance.get('moveBounded')){\\r\\n                        var current = element,\\r\\n                            offsetLeft = -left,\\r\\n                            offsetTop = -top;\\r\\n                        \\r\\n                        //calc offset\\r\\n                        do {\\r\\n                            offsetLeft += current.offsetLeft;\\r\\n                            offsetTop += current.offsetTop;\\r\\n                        } while (current = current.offsetParent);\\r\\n                        \\r\\n                        bounds = {\\r\\n                            maxLeft : offsetLeft,\\r\\n                            minLeft : -offsetLeft,\\r\\n                            maxTop  : document.documentElement.clientHeight - element.clientHeight - offsetTop,\\r\\n                            minTop  : -offsetTop\\r\\n                        };\\r\\n                        moveDelegate = moveElementBounded;\\r\\n                    }else{\\r\\n                        bounds = null;\\r\\n                        moveDelegate = moveElement;\\r\\n                    }\\r\\n                    \\r\\n                    // allow custom `onmove` method\\r\\n                    dispatchEvent('onmove', instance);\\r\\n\\r\\n                    refreshTop = !instance.isModal() && instance.isPinned();\\r\\n                    movable = instance;\\r\\n                    moveDelegate(eventSrc, element);\\r\\n                    addClass(document.body, classes.noSelection);\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * The actual move handler,  attached to document.body mousemove event.\\r\\n         *\\r\\n         * @param {Event} event\\tDOM event object.\\r\\n         * \\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function move(event) {\\r\\n            if (movable) {\\r\\n                var eventSrc;\\r\\n                if (event.type === 'touchmove') {\\r\\n                    event.preventDefault();\\r\\n                    eventSrc = event.targetTouches[0];\\r\\n                } else if (event.button === 0) {\\r\\n                    eventSrc = event;\\r\\n                }\\r\\n                if (eventSrc) {\\r\\n                    moveDelegate(eventSrc, movable.elements.dialog);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Triggers the end of a move event,  attached to document.body mouseup event.\\r\\n         * Removes no-selection class from document.body, allowing selection.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function endMove() {\\r\\n            if (movable) {\\r\\n                var instance = movable;\\r\\n                movable = bounds = null;\\r\\n                removeClass(document.body, classes.noSelection);\\r\\n                removeClass(instance.elements.dialog, classes.capture);\\r\\n                // allow custom `onmoved` method\\r\\n                dispatchEvent('onmoved', instance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Resets any changes made by moving the element to its original state,\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function resetMove(instance) {\\r\\n            movable = null;\\r\\n            var element = instance.elements.dialog;\\r\\n            element.style.left = element.style.top = '';\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Updates the dialog move behavior.\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function updateMovable(instance) {\\r\\n            if (instance.get('movable')) {\\r\\n                // add class\\r\\n                addClass(instance.elements.root, classes.movable);\\r\\n                if (instance.isOpen()) {\\r\\n                    bindMovableEvents(instance);\\r\\n                }\\r\\n            } else {\\r\\n\\r\\n                //reset\\r\\n                resetMove(instance);\\r\\n                // remove class\\r\\n                removeClass(instance.elements.root, classes.movable);\\r\\n                if (instance.isOpen()) {\\r\\n                    unbindMovableEvents(instance);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /* Controls moving a dialog around */\\r\\n        //holde the current instance being resized\\t\\t\\r\\n        var resizable = null,\\r\\n            //holds the staring left offset when resize starts.\\r\\n            startingLeft = Number.Nan,\\r\\n            //holds the staring width when resize starts.\\r\\n            startingWidth = 0,\\r\\n            //holds the initial width when resized for the first time.\\r\\n            minWidth = 0,\\r\\n            //holds the offset of the resize handle.\\r\\n            handleOffset = 0\\r\\n        ;\\r\\n\\r\\n        /**\\r\\n         * Helper: sets the element width/height and updates left coordinate if neccessary.\\r\\n         *\\r\\n         * @param {Event} event\\tDOM mousemove event object.\\r\\n         * @param {Node} element The element being moved.\\r\\n         * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.\\r\\n         * \\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function resizeElement(event, element, pageRelative) {\\r\\n\\r\\n            //calculate offsets from 0,0\\r\\n            var current = element;\\r\\n            var offsetLeft = 0;\\r\\n            var offsetTop = 0;\\r\\n            do {\\r\\n                offsetLeft += current.offsetLeft;\\r\\n                offsetTop += current.offsetTop;\\r\\n            } while (current = current.offsetParent);\\r\\n\\r\\n            // determine X,Y coordinates.\\r\\n            var X, Y;\\r\\n            if (pageRelative === true) {\\r\\n                X = event.pageX;\\r\\n                Y = event.pageY;\\r\\n            } else {\\r\\n                X = event.clientX;\\r\\n                Y = event.clientY;\\r\\n            }\\r\\n            // rtl handling\\r\\n            var isRTL = isRightToLeft();\\r\\n            if (isRTL) {\\r\\n                // reverse X \\r\\n                X = document.body.offsetWidth - X;\\r\\n                // if has a starting left, calculate offsetRight\\r\\n                if (!isNaN(startingLeft)) {\\r\\n                    offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // set width/height\\r\\n            element.style.height = (Y - offsetTop + handleOffset) + 'px';\\r\\n            element.style.width = (X - offsetLeft + handleOffset) + 'px';\\r\\n\\r\\n            // if the element being resized has a starting left, maintain it.\\r\\n            // the dialog is centered, divide by half the offset to maintain the margins.\\r\\n            if (!isNaN(startingLeft)) {\\r\\n                var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;\\r\\n                if (isRTL) {\\r\\n                    //negate the diff, why?\\r\\n                    //when growing it should decrease left\\r\\n                    //when shrinking it should increase left\\r\\n                    diff *= -1;\\r\\n                }\\r\\n                if (element.offsetWidth > startingWidth) {\\r\\n                    //growing\\r\\n                    element.style.left = (startingLeft + diff) + 'px';\\r\\n                } else if (element.offsetWidth >= minWidth) {\\r\\n                    //shrinking\\r\\n                    element.style.left = (startingLeft - diff) + 'px';\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Triggers the start of a resize event, attached to the resize handle element mouse down event.\\r\\n         * Adds no-selection class to the body, disabling selection while moving.\\r\\n         *\\r\\n         * @param {Event} event\\tDOM event object.\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         * \\r\\n         * @return {Boolean} false\\r\\n         */\\r\\n        function beginResize(event, instance) {\\r\\n            if (!instance.isMaximized()) {\\r\\n                var eventSrc;\\r\\n                if (event.type === 'touchstart') {\\r\\n                    event.preventDefault();\\r\\n                    eventSrc = event.targetTouches[0];\\r\\n                } else if (event.button === 0) {\\r\\n                    eventSrc = event;\\r\\n                }\\r\\n                if (eventSrc) {\\r\\n                    // allow custom `onresize` method\\r\\n                    dispatchEvent('onresize', instance);\\r\\n                    \\r\\n                    resizable = instance;\\r\\n                    handleOffset = instance.elements.resizeHandle.offsetHeight / 2;\\r\\n                    var element = instance.elements.dialog;\\r\\n                    addClass(element, classes.capture);\\r\\n                    startingLeft = parseInt(element.style.left, 10);\\r\\n                    element.style.height = element.offsetHeight + 'px';\\r\\n                    element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';\\r\\n                    element.style.width = (startingWidth = element.offsetWidth) + 'px';\\r\\n\\r\\n                    if (element.style.maxWidth !== 'none') {\\r\\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\\r\\n                    }\\r\\n                    element.style.maxWidth = 'none';\\r\\n                    addClass(document.body, classes.noSelection);\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * The actual resize handler,  attached to document.body mousemove event.\\r\\n         *\\r\\n         * @param {Event} event\\tDOM event object.\\r\\n         * \\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function resize(event) {\\r\\n            if (resizable) {\\r\\n                var eventSrc;\\r\\n                if (event.type === 'touchmove') {\\r\\n                    event.preventDefault();\\r\\n                    eventSrc = event.targetTouches[0];\\r\\n                } else if (event.button === 0) {\\r\\n                    eventSrc = event;\\r\\n                }\\r\\n                if (eventSrc) {\\r\\n                    resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Triggers the end of a resize event,  attached to document.body mouseup event.\\r\\n         * Removes no-selection class from document.body, allowing selection.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function endResize() {\\r\\n            if (resizable) {\\r\\n                var instance = resizable;\\r\\n                resizable = null;\\r\\n                removeClass(document.body, classes.noSelection);\\r\\n                removeClass(instance.elements.dialog, classes.capture);\\r\\n                cancelClick = true;\\r\\n                // allow custom `onresized` method\\r\\n                dispatchEvent('onresized', instance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Resets any changes made by resizing the element to its original state.\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function resetResize(instance) {\\r\\n            resizable = null;\\r\\n            var element = instance.elements.dialog;\\r\\n            if (element.style.maxWidth === 'none') {\\r\\n                //clear inline styles.\\r\\n                element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';\\r\\n                //reset variables.\\r\\n                startingLeft = Number.Nan;\\r\\n                startingWidth = minWidth = handleOffset = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        /**\\r\\n         * Updates the dialog move behavior.\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function updateResizable(instance) {\\r\\n            if (instance.get('resizable')) {\\r\\n                // add class\\r\\n                addClass(instance.elements.root, classes.resizable);\\r\\n                if (instance.isOpen()) {\\r\\n                    bindResizableEvents(instance);\\r\\n                }\\r\\n            } else {\\r\\n                //reset\\r\\n                resetResize(instance);\\r\\n                // remove class\\r\\n                removeClass(instance.elements.root, classes.resizable);\\r\\n                if (instance.isOpen()) {\\r\\n                    unbindResizableEvents(instance);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Reset move/resize on window resize.\\r\\n         *\\r\\n         * @param {Event} event\\twindow resize event object.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function windowResize(/*event*/) {\\r\\n            for (var x = 0; x < openDialogs.length; x += 1) {\\r\\n                var instance = openDialogs[x];\\r\\n                if (instance.get('autoReset')) {\\r\\n                    resetMove(instance);\\r\\n                    resetResize(instance);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        /**\\r\\n         * Bind dialogs events\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function bindEvents(instance) {\\r\\n            // if first dialog, hook global handlers\\r\\n            if (openDialogs.length === 1) {\\r\\n                //global\\r\\n                on(window, 'resize', windowResize);\\r\\n                on(document.body, 'keyup', keyupHandler);\\r\\n                on(document.body, 'keydown', keydownHandler);\\r\\n                on(document.body, 'focus', onReset);\\r\\n\\r\\n                //move\\r\\n                on(document.documentElement, 'mousemove', move);\\r\\n                on(document.documentElement, 'touchmove', move);\\r\\n                on(document.documentElement, 'mouseup', endMove);\\r\\n                on(document.documentElement, 'touchend', endMove);\\r\\n                //resize\\r\\n                on(document.documentElement, 'mousemove', resize);\\r\\n                on(document.documentElement, 'touchmove', resize);\\r\\n                on(document.documentElement, 'mouseup', endResize);\\r\\n                on(document.documentElement, 'touchend', endResize);\\r\\n            }\\r\\n\\r\\n            // common events\\r\\n            on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\\r\\n            on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\\r\\n            on(instance.elements.reset[0], 'focus', instance.__internal.resetHandler);\\r\\n            on(instance.elements.reset[1], 'focus', instance.__internal.resetHandler);\\r\\n\\r\\n            //prevent handling key up when dialog is being opened by a key stroke.\\r\\n            cancelKeyup = true;\\r\\n            // hook in transition handler\\r\\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\\r\\n\\r\\n            // modelss only events\\r\\n            if (!instance.get('modal')) {\\r\\n                bindModelessEvents(instance);\\r\\n            }\\r\\n\\r\\n            // resizable\\r\\n            if (instance.get('resizable')) {\\r\\n                bindResizableEvents(instance);\\r\\n            }\\r\\n\\r\\n            // movable\\r\\n            if (instance.get('movable')) {\\r\\n                bindMovableEvents(instance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Unbind dialogs events\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function unbindEvents(instance) {\\r\\n            // if last dialog, remove global handlers\\r\\n            if (openDialogs.length === 1) {\\r\\n                //global\\r\\n                off(window, 'resize', windowResize);\\r\\n                off(document.body, 'keyup', keyupHandler);\\r\\n                off(document.body, 'keydown', keydownHandler);\\r\\n                off(document.body, 'focus', onReset);\\r\\n                //move\\r\\n                off(document.documentElement, 'mousemove', move);\\r\\n                off(document.documentElement, 'mouseup', endMove);\\r\\n                //resize\\r\\n                off(document.documentElement, 'mousemove', resize);\\r\\n                off(document.documentElement, 'mouseup', endResize);\\r\\n            }\\r\\n\\r\\n            // common events\\r\\n            off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\\r\\n            off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\\r\\n            off(instance.elements.reset[0], 'focus', instance.__internal.resetHandler);\\r\\n            off(instance.elements.reset[1], 'focus', instance.__internal.resetHandler);\\r\\n\\r\\n            // hook out transition handler\\r\\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\\r\\n\\r\\n            // modelss only events\\r\\n            if (!instance.get('modal')) {\\r\\n                unbindModelessEvents(instance);\\r\\n            }\\r\\n\\r\\n            // movable\\r\\n            if (instance.get('movable')) {\\r\\n                unbindMovableEvents(instance);\\r\\n            }\\r\\n\\r\\n            // resizable\\r\\n            if (instance.get('resizable')) {\\r\\n                unbindResizableEvents(instance);\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Bind modeless specific events\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function bindModelessEvents(instance) {\\r\\n            on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Unbind modeless specific events\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function unbindModelessEvents(instance) {\\r\\n            off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n        /**\\r\\n         * Bind movable specific events\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function bindMovableEvents(instance) {\\r\\n            on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\\r\\n            on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Unbind movable specific events\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function unbindMovableEvents(instance) {\\r\\n            off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\\r\\n            off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n        /**\\r\\n         * Bind resizable specific events\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function bindResizableEvents(instance) {\\r\\n            on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\\r\\n            on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Unbind resizable specific events\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function unbindResizableEvents(instance) {\\r\\n            off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\\r\\n            off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Bind closable events\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function bindClosableEvents(instance) {\\r\\n            on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Unbind closable specific events\\r\\n         *\\r\\n         * @param {Object} instance The dilog instance.\\r\\n         *\\r\\n         * @return {undefined}\\r\\n         */\\r\\n        function unbindClosableEvents(instance) {\\r\\n            off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\\r\\n        }\\r\\n        // dialog API\\r\\n        return {\\r\\n            __init:initialize,\\r\\n            /**\\r\\n             * Check if dialog is currently open\\r\\n             *\\r\\n             * @return {Boolean}\\r\\n             */\\r\\n            isOpen: function () {\\r\\n                return this.__internal.isOpen;\\r\\n            },\\r\\n            isModal: function (){\\r\\n                return this.elements.root.className.indexOf(classes.modeless) < 0;\\r\\n            },\\r\\n            isMaximized:function(){\\r\\n                return this.elements.root.className.indexOf(classes.maximized) > -1;\\r\\n            },\\r\\n            isPinned:function(){\\r\\n                return this.elements.root.className.indexOf(classes.unpinned) < 0;\\r\\n            },\\r\\n            maximize:function(){\\r\\n                if(!this.isMaximized()){\\r\\n                    maximize(this);\\r\\n                }\\r\\n                return this;\\r\\n            },\\r\\n            restore:function(){\\r\\n                if(this.isMaximized()){\\r\\n                    restore(this);\\r\\n                }\\r\\n                return this;\\r\\n            },\\r\\n            pin:function(){\\r\\n                if(!this.isPinned()){\\r\\n                    pin(this);\\r\\n                }\\r\\n                return this;\\r\\n            },\\r\\n            unpin:function(){\\r\\n                if(this.isPinned()){\\r\\n                    unpin(this);\\r\\n                }\\r\\n                return this;\\r\\n            },\\r\\n            bringToFront:function(){\\r\\n                bringToFront(null, this);\\r\\n                return this;\\r\\n            },\\r\\n            /**\\r\\n             * Move the dialog to a specific x/y coordinates\\r\\n             *\\r\\n             * @param {Number} x    The new dialog x coordinate in pixels.\\r\\n             * @param {Number} y    The new dialog y coordinate in pixels.\\r\\n             *\\r\\n             * @return {Object} The dialog instance.\\r\\n             */\\r\\n            moveTo:function(x,y){\\r\\n                if(!isNaN(x) && !isNaN(y)){\\r\\n                    // allow custom `onmove` method\\r\\n                    dispatchEvent('onmove', this);\\r\\n                    \\r\\n                    var element = this.elements.dialog,\\r\\n                        current = element,\\r\\n                        offsetLeft = 0,\\r\\n                        offsetTop = 0;\\r\\n                    \\r\\n                    //subtract existing left,top\\r\\n                    if (element.style.left) {\\r\\n                        offsetLeft -= parseInt(element.style.left, 10);\\r\\n                    }\\r\\n                    if (element.style.top) {\\r\\n                        offsetTop -= parseInt(element.style.top, 10);\\r\\n                    }\\r\\n                    //calc offset\\r\\n                    do {\\r\\n                        offsetLeft += current.offsetLeft;\\r\\n                        offsetTop += current.offsetTop;\\r\\n                    } while (current = current.offsetParent);\\r\\n\\r\\n                    //calc left, top\\r\\n                    var left = (x - offsetLeft);\\r\\n                    var top  = (y - offsetTop);\\r\\n\\r\\n                    //// rtl handling\\r\\n                    if (isRightToLeft()) {\\r\\n                        left *= -1;\\r\\n                    }\\r\\n\\r\\n                    element.style.left = left + 'px';\\r\\n                    element.style.top = top + 'px';\\r\\n                    \\r\\n                    // allow custom `onmoved` method\\r\\n                    dispatchEvent('onmoved', this);\\r\\n                }\\r\\n                return this;\\r\\n            },\\r\\n            /**\\r\\n             * Resize the dialog to a specific width/height (the dialog must be 'resizable').\\r\\n             * The dialog can be resized to:\\r\\n             *  A minimum width equal to the initial display width\\r\\n             *  A minimum height equal to the sum of header/footer heights.\\r\\n             *\\r\\n             *\\r\\n             * @param {Number or String} width    The new dialog width in pixels or in percent.\\r\\n             * @param {Number or String} height   The new dialog height in pixels or in percent.\\r\\n             *\\r\\n             * @return {Object} The dialog instance.\\r\\n             */\\r\\n            resizeTo:function(width,height){\\r\\n                var w = parseFloat(width),\\r\\n                    h = parseFloat(height),\\r\\n                    regex = /(\\\\d*\\\\.\\\\d+|\\\\d+)%/\\r\\n                ;\\r\\n\\r\\n                if(!isNaN(w) && !isNaN(h) && this.get('resizable') === true){\\r\\n                    \\r\\n                    // allow custom `onresize` method\\r\\n                    dispatchEvent('onresize', this);\\r\\n                    \\r\\n                    if(('' + width).match(regex)){\\r\\n                        w = w / 100 * document.documentElement.clientWidth ;\\r\\n                    }\\r\\n\\r\\n                    if(('' + height).match(regex)){\\r\\n                        h = h / 100 * document.documentElement.clientHeight;\\r\\n                    }\\r\\n\\r\\n                    var element = this.elements.dialog;\\r\\n                    if (element.style.maxWidth !== 'none') {\\r\\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\\r\\n                    }\\r\\n                    element.style.maxWidth = 'none';\\r\\n                    element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';\\r\\n                    element.style.width = w + 'px';\\r\\n                    element.style.height = h + 'px';\\r\\n                    \\r\\n                    // allow custom `onresized` method\\r\\n                    dispatchEvent('onresized', this);\\r\\n                }\\r\\n                return this;\\r\\n            },\\r\\n            /**\\r\\n             * Gets or Sets dialog settings/options \\r\\n             *\\r\\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\\r\\n             * @param {Object} value Optional, the value associated with the key (in case it was a string).\\r\\n             *\\r\\n             * @return {undefined}\\r\\n             */\\r\\n            setting : function (key, value) {\\r\\n                var self = this;\\r\\n                var result = update(this, this.__internal.options, function(k,o,n){ optionUpdated(self,k,o,n); }, key, value);\\r\\n                if(result.op === 'get'){\\r\\n                    if(result.found){\\r\\n                        return result.value;\\r\\n                    }else if(typeof this.settings !== 'undefined'){\\r\\n                        return update(this, this.settings, this.settingUpdated || function(){}, key, value).value;\\r\\n                    }else{\\r\\n                        return undefined;\\r\\n                    }\\r\\n                }else if(result.op === 'set'){\\r\\n                    if(result.items.length > 0){\\r\\n                        var callback = this.settingUpdated || function(){};\\r\\n                        for(var x=0;x<result.items.length;x+=1){\\r\\n                            var item = result.items[x];\\r\\n                            if(!item.found && typeof this.settings !== 'undefined'){\\r\\n                                update(this, this.settings, callback, item.key, item.value);\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                    return this;\\r\\n                }\\r\\n            },\\r\\n            /**\\r\\n             * [Alias] Sets dialog settings/options \\r\\n             */\\r\\n            set:function(key, value){\\r\\n                this.setting(key,value);\\r\\n                return this;\\r\\n            },\\r\\n            /**\\r\\n             * [Alias] Gets dialog settings/options \\r\\n             */\\r\\n            get:function(key){\\r\\n                return this.setting(key);\\r\\n            },\\r\\n            /**\\r\\n            * Sets dialog header\\r\\n            * @content {string or element}\\r\\n            *\\r\\n            * @return {undefined}\\r\\n            */\\r\\n            setHeader:function(content){\\r\\n                if(typeof content === 'string'){\\r\\n                    clearContents(this.elements.header);\\r\\n                    this.elements.header.innerHTML = content;\\r\\n                }else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content){\\r\\n                    clearContents(this.elements.header);\\r\\n                    this.elements.header.appendChild(content);\\r\\n                }\\r\\n                return this;\\r\\n            },\\r\\n            /**\\r\\n            * Sets dialog contents\\r\\n            * @content {string or element}\\r\\n            *\\r\\n            * @return {undefined}\\r\\n            */\\r\\n            setContent:function(content){\\r\\n                if(typeof content === 'string'){\\r\\n                    clearContents(this.elements.content);\\r\\n                    this.elements.content.innerHTML = content;\\r\\n                }else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content){\\r\\n                    clearContents(this.elements.content);\\r\\n                    this.elements.content.appendChild(content);\\r\\n                }\\r\\n                return this;\\r\\n            },\\r\\n            /**\\r\\n             * Show the dialog as modal\\r\\n             *\\r\\n             * @return {Object} the dialog instance.\\r\\n             */\\r\\n            showModal: function(className){\\r\\n                return this.show(true, className);\\r\\n            },\\r\\n            /**\\r\\n             * Show the dialog\\r\\n             *\\r\\n             * @return {Object} the dialog instance.\\r\\n             */\\r\\n            show: function (modal, className) {\\r\\n                \\r\\n                // ensure initialization\\r\\n                initialize(this);\\r\\n\\r\\n                if ( !this.__internal.isOpen ) {\\r\\n\\r\\n                    // add to open dialogs\\r\\n                    this.__internal.isOpen = true;\\r\\n                    openDialogs.push(this);\\r\\n\\r\\n                    // save last focused element\\r\\n                    if(alertify.defaults.maintainFocus){\\r\\n                        this.__internal.activeElement = document.activeElement;\\r\\n                    }\\r\\n\\r\\n                    //allow custom dom manipulation updates before showing the dialog.\\r\\n                    if(typeof this.prepare === 'function'){\\r\\n                        this.prepare();\\r\\n                    }\\r\\n\\r\\n                    bindEvents(this);\\r\\n\\r\\n                    if(modal !== undefined){\\r\\n                        this.set('modal', modal);\\r\\n                    }\\r\\n\\r\\n                    //save scroll to prevent document jump\\r\\n                    saveScrollPosition();\\r\\n\\r\\n                    ensureNoOverflow();\\r\\n\\r\\n                    // allow custom dialog class on show\\r\\n                    if(typeof className === 'string' && className !== ''){\\r\\n                        this.__internal.className = className;\\r\\n                        addClass(this.elements.root, className);\\r\\n                    }\\r\\n\\r\\n                    // maximize if start maximized\\r\\n                    if ( this.get('startMaximized')) {\\r\\n                        this.maximize();\\r\\n                    }else if(this.isMaximized()){\\r\\n                        restore(this);\\r\\n                    }\\r\\n\\r\\n                    updateAbsPositionFix(this);\\r\\n\\r\\n                    removeClass(this.elements.root, classes.animationOut);\\r\\n                    addClass(this.elements.root, classes.animationIn);\\r\\n\\r\\n                    // set 1s fallback in case transition event doesn't fire\\r\\n                    clearTimeout( this.__internal.timerIn);\\r\\n                    this.__internal.timerIn = setTimeout( this.__internal.transitionInHandler, transition.supported ? 1000 : 100 );\\r\\n\\r\\n                    if(isSafari){\\r\\n                        // force desktop safari reflow\\r\\n                        var root = this.elements.root;\\r\\n                        root.style.display  = 'none';\\r\\n                        setTimeout(function(){root.style.display  = 'block';}, 0);\\r\\n                    }\\r\\n\\r\\n                    //reflow\\r\\n                    reflow = this.elements.root.offsetWidth;\\r\\n                  \\r\\n                    // show dialog\\r\\n                    removeClass(this.elements.root, classes.hidden);\\r\\n\\r\\n                    // internal on show event\\r\\n                    if(typeof this.hooks.onshow === 'function'){\\r\\n                        this.hooks.onshow.call(this);\\r\\n                    }\\r\\n\\r\\n                    // allow custom `onshow` method\\r\\n                    dispatchEvent('onshow', this);\\r\\n\\r\\n                }else{\\r\\n                    // reset move updates\\r\\n                    resetMove(this);\\r\\n                    // reset resize updates\\r\\n                    resetResize(this);\\r\\n                    // shake the dialog to indicate its already open\\r\\n                    addClass(this.elements.dialog, classes.shake);\\r\\n                    var self = this;\\r\\n                    setTimeout(function(){\\r\\n                        removeClass(self.elements.dialog, classes.shake);\\r\\n                    },200);\\r\\n                }\\r\\n                return this;\\r\\n            },\\r\\n            /**\\r\\n             * Close the dialog\\r\\n             *\\r\\n             * @return {Object} The dialog instance\\r\\n             */\\r\\n            close: function () {\\r\\n                if (this.__internal.isOpen ) {\\r\\n                    // custom `onclosing` event\\r\\n                    if(dispatchEvent('onclosing', this) !== false){\\r\\n\\r\\n                        unbindEvents(this);\\r\\n\\r\\n                        removeClass(this.elements.root, classes.animationIn);\\r\\n                        addClass(this.elements.root, classes.animationOut);\\r\\n\\r\\n                        // set 1s fallback in case transition event doesn't fire\\r\\n                        clearTimeout( this.__internal.timerOut );\\r\\n                        this.__internal.timerOut = setTimeout( this.__internal.transitionOutHandler, transition.supported ? 1000 : 100 );\\r\\n                        // hide dialog\\r\\n                        addClass(this.elements.root, classes.hidden);\\r\\n                        //reflow\\r\\n                        reflow = this.elements.modal.offsetWidth;\\r\\n\\r\\n                        // remove custom dialog class on hide\\r\\n                        if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {\\r\\n                            removeClass(this.elements.root, this.__internal.className);\\r\\n                        }\\r\\n\\r\\n                        // internal on close event\\r\\n                        if(typeof this.hooks.onclose === 'function'){\\r\\n                            this.hooks.onclose.call(this);\\r\\n                        }\\r\\n\\r\\n                        // allow custom `onclose` method\\r\\n                        dispatchEvent('onclose', this);\\r\\n\\r\\n                        //remove from open dialogs\\r\\n                        openDialogs.splice(openDialogs.indexOf(this),1);\\r\\n                        this.__internal.isOpen = false;\\r\\n\\r\\n                        ensureNoOverflow();\\r\\n                    }\\r\\n\\r\\n                }\\r\\n                return this;\\r\\n            },\\r\\n            /**\\r\\n             * Close all open dialogs except this.\\r\\n             *\\r\\n             * @return {undefined}\\r\\n             */\\r\\n            closeOthers:function(){\\r\\n                alertify.closeAll(this);\\r\\n                return this;\\r\\n            },\\r\\n            /**\\r\\n             * Destroys this dialog instance\\r\\n             *\\r\\n             * @return {undefined}\\r\\n             */\\r\\n            destroy:function(){\\r\\n                if (this.__internal.isOpen ) {\\r\\n                    //mark dialog for destruction, this will be called on tranistionOut event.\\r\\n                    this.__internal.destroy = function(){\\r\\n                        destruct(this, initialize);\\r\\n                    };\\r\\n                    //close the dialog to unbind all events.\\r\\n                    this.close();\\r\\n                }else{\\r\\n                    destruct(this, initialize);\\r\\n                }\\r\\n                return this;\\r\\n            },\\r\\n        };\\r\\n\\t} () );\\r\\n    var notifier = (function () {\\r\\n        var reflow,\\r\\n            element,\\r\\n            openInstances = [],\\r\\n            classes = {\\r\\n                base: 'alertify-notifier',\\r\\n                message: 'ajs-message',\\r\\n                top: 'ajs-top',\\r\\n                right: 'ajs-right',\\r\\n                bottom: 'ajs-bottom',\\r\\n                left: 'ajs-left',\\r\\n                visible: 'ajs-visible',\\r\\n                hidden: 'ajs-hidden',\\r\\n                close: 'ajs-close'\\r\\n            };\\r\\n        /**\\r\\n         * Helper: initializes the notifier instance\\r\\n         * \\r\\n         */\\r\\n        function initialize(instance) {\\r\\n\\r\\n            if (!instance.__internal) {\\r\\n                instance.__internal = {\\r\\n                    position: alertify.defaults.notifier.position,\\r\\n                    delay: alertify.defaults.notifier.delay,\\r\\n                };\\r\\n\\r\\n                element = document.createElement('DIV');\\r\\n\\r\\n                updatePosition(instance);\\r\\n            }\\r\\n\\r\\n            //add to DOM tree.\\r\\n            if (element.parentNode !== document.body) {\\r\\n                document.body.appendChild(element);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        function pushInstance(instance) {\\r\\n            instance.__internal.pushed = true;\\r\\n            openInstances.push(instance);\\r\\n        }\\r\\n        function popInstance(instance) {\\r\\n            openInstances.splice(openInstances.indexOf(instance), 1);\\r\\n            instance.__internal.pushed = false;\\r\\n        }\\r\\n        /**\\r\\n         * Helper: update the notifier instance position\\r\\n         * \\r\\n         */\\r\\n        function updatePosition(instance) {\\r\\n            element.className = classes.base;\\r\\n            switch (instance.__internal.position) {\\r\\n            case 'top-right':\\r\\n                addClass(element, classes.top + ' ' + classes.right);\\r\\n                break;\\r\\n            case 'top-left':\\r\\n                addClass(element, classes.top + ' ' + classes.left);\\r\\n                break;\\r\\n            case 'bottom-left':\\r\\n                addClass(element, classes.bottom + ' ' + classes.left);\\r\\n                break;\\r\\n\\r\\n            default:\\r\\n            case 'bottom-right':\\r\\n                addClass(element, classes.bottom + ' ' + classes.right);\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /**\\r\\n        * creates a new notification message\\r\\n        *\\r\\n        * @param  {DOMElement} message\\tThe notifier message element\\r\\n        * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.\\r\\n        * @param  {Function} callback A callback function to be invoked when the message is dismissed.\\r\\n        *\\r\\n        * @return {undefined}\\r\\n        */\\r\\n        function create(div, callback) {\\r\\n\\r\\n            function clickDelegate(event, instance) {\\r\\n                if(!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true'){\\r\\n                    instance.dismiss(true);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            function transitionDone(event, instance) {\\r\\n                // unbind event\\r\\n                off(instance.element, transition.type, transitionDone);\\r\\n                // remove the message\\r\\n                element.removeChild(instance.element);\\r\\n            }\\r\\n\\r\\n            function initialize(instance) {\\r\\n                if (!instance.__internal) {\\r\\n                    instance.__internal = {\\r\\n                        pushed: false,\\r\\n                        delay : undefined,\\r\\n                        timer: undefined,\\r\\n                        clickHandler: undefined,\\r\\n                        transitionEndHandler: undefined,\\r\\n                        transitionTimeout: undefined\\r\\n                    };\\r\\n                    instance.__internal.clickHandler = delegate(instance, clickDelegate);\\r\\n                    instance.__internal.transitionEndHandler = delegate(instance, transitionDone);\\r\\n                }\\r\\n                return instance;\\r\\n            }\\r\\n            function clearTimers(instance) {\\r\\n                clearTimeout(instance.__internal.timer);\\r\\n                clearTimeout(instance.__internal.transitionTimeout);\\r\\n            }\\r\\n            return initialize({\\r\\n                /* notification DOM element*/\\r\\n                element: div,\\r\\n                /*\\r\\n                 * Pushes a notification message \\r\\n                 * @param {string or DOMElement} content The notification message content\\r\\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\\r\\n                 * \\r\\n                 */\\r\\n                push: function (_content, _wait) {\\r\\n                    if (!this.__internal.pushed) {\\r\\n\\r\\n                        pushInstance(this);\\r\\n                        clearTimers(this);\\r\\n\\r\\n                        var content, wait;\\r\\n                        switch (arguments.length) {\\r\\n                        case 0:\\r\\n                            wait = this.__internal.delay;\\r\\n                            break;\\r\\n                        case 1:\\r\\n                            if (typeof (_content) === 'number') {\\r\\n                                wait = _content;\\r\\n                            } else {\\r\\n                                content = _content;\\r\\n                                wait = this.__internal.delay;\\r\\n                            }\\r\\n                            break;\\r\\n                        case 2:\\r\\n                            content = _content;\\r\\n                            wait = _wait;\\r\\n                            break;\\r\\n                        }\\r\\n                        this.__internal.closeButton = alertify.defaults.notifier.closeButton;\\r\\n                        // set contents\\r\\n                        if (typeof content !== 'undefined') {\\r\\n                            this.setContent(content);\\r\\n                        }\\r\\n                        // append or insert\\r\\n                        if (notifier.__internal.position.indexOf('top') < 0) {\\r\\n                            element.appendChild(this.element);\\r\\n                        } else {\\r\\n                            element.insertBefore(this.element, element.firstChild);\\r\\n                        }\\r\\n                        reflow = this.element.offsetWidth;\\r\\n                        addClass(this.element, classes.visible);\\r\\n                        // attach click event\\r\\n                        on(this.element, 'click', this.__internal.clickHandler);\\r\\n                        return this.delay(wait);\\r\\n                    }\\r\\n                    return this;\\r\\n                },\\r\\n                /*\\r\\n                 * {Function} callback function to be invoked before dismissing the notification message.\\r\\n                 * Remarks: A return value === 'false' will cancel the dismissal\\r\\n                 * \\r\\n                 */\\r\\n                ondismiss: function () { },\\r\\n                /*\\r\\n                 * {Function} callback function to be invoked when the message is dismissed.\\r\\n                 * \\r\\n                 */\\r\\n                callback: callback,\\r\\n                /*\\r\\n                 * Dismisses the notification message \\r\\n                 * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.\\r\\n                 * \\r\\n                 */\\r\\n                dismiss: function (clicked) {\\r\\n                    if (this.__internal.pushed) {\\r\\n                        clearTimers(this);\\r\\n                        if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {\\r\\n                            //detach click event\\r\\n                            off(this.element, 'click', this.__internal.clickHandler);\\r\\n                            // ensure element exists\\r\\n                            if (typeof this.element !== 'undefined' && this.element.parentNode === element) {\\r\\n                                //transition end or fallback\\r\\n                                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);\\r\\n                                removeClass(this.element, classes.visible);\\r\\n\\r\\n                                // custom callback on dismiss\\r\\n                                if (typeof this.callback === 'function') {\\r\\n                                    this.callback.call(this, clicked);\\r\\n                                }\\r\\n                            }\\r\\n                            popInstance(this);\\r\\n                        }\\r\\n                    }\\r\\n                    return this;\\r\\n                },\\r\\n                /*\\r\\n                 * Delays the notification message dismissal\\r\\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\\r\\n                 * \\r\\n                 */\\r\\n                delay: function (wait) {\\r\\n                    clearTimers(this);\\r\\n                    this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;\\r\\n                    if (this.__internal.delay > 0) {\\r\\n                        var  self = this;\\r\\n                        this.__internal.timer = setTimeout(function () { self.dismiss(); }, this.__internal.delay * 1000);\\r\\n                    }\\r\\n                    return this;\\r\\n                },\\r\\n                /*\\r\\n                 * Sets the notification message contents\\r\\n                 * @param {string or DOMElement} content The notification message content\\r\\n                 * \\r\\n                 */\\r\\n                setContent: function (content) {\\r\\n                    if (typeof content === 'string') {\\r\\n                        clearContents(this.element);\\r\\n                        this.element.innerHTML = content;\\r\\n                    } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {\\r\\n                        clearContents(this.element);\\r\\n                        this.element.appendChild(content);\\r\\n                    }\\r\\n                    if(this.__internal.closeButton){\\r\\n                        var close = document.createElement('span');\\r\\n                        addClass(close, classes.close);\\r\\n                        close.setAttribute('data-close', true);\\r\\n                        this.element.appendChild(close);\\r\\n                    }\\r\\n                    return this;\\r\\n                },\\r\\n                /*\\r\\n                 * Dismisses all open notifications except this.\\r\\n                 * \\r\\n                 */\\r\\n                dismissOthers: function () {\\r\\n                    notifier.dismissAll(this);\\r\\n                    return this;\\r\\n                }\\r\\n            });\\r\\n        }\\r\\n\\r\\n        //notifier api\\r\\n        return {\\r\\n            /**\\r\\n             * Gets or Sets notifier settings. \\r\\n             *\\r\\n             * @param {string} key The setting name\\r\\n             * @param {Variant} value The setting value.\\r\\n             *\\r\\n             * @return {Object}\\tif the called as a setter, return the notifier instance.\\r\\n             */\\r\\n            setting: function (key, value) {\\r\\n                //ensure init\\r\\n                initialize(this);\\r\\n\\r\\n                if (typeof value === 'undefined') {\\r\\n                    //get\\r\\n                    return this.__internal[key];\\r\\n                } else {\\r\\n                    //set\\r\\n                    switch (key) {\\r\\n                    case 'position':\\r\\n                        this.__internal.position = value;\\r\\n                        updatePosition(this);\\r\\n                        break;\\r\\n                    case 'delay':\\r\\n                        this.__internal.delay = value;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n                return this;\\r\\n            },\\r\\n            /**\\r\\n             * [Alias] Sets dialog settings/options \\r\\n             */\\r\\n            set:function(key,value){\\r\\n                this.setting(key,value);\\r\\n                return this;\\r\\n            },\\r\\n            /**\\r\\n             * [Alias] Gets dialog settings/options \\r\\n             */\\r\\n            get:function(key){\\r\\n                return this.setting(key);\\r\\n            },\\r\\n            /**\\r\\n             * Creates a new notification message\\r\\n             *\\r\\n             * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).\\r\\n             * @param {Function} callback  A callback function to be invoked when the message is dismissed.\\r\\n             *\\r\\n             * @return {undefined}\\r\\n             */\\r\\n            create: function (type, callback) {\\r\\n                //ensure notifier init\\r\\n                initialize(this);\\r\\n                //create new notification message\\r\\n                var div = document.createElement('div');\\r\\n                div.className = classes.message + ((typeof type === 'string' && type !== '') ? ' ajs-' + type : '');\\r\\n                return create(div, callback);\\r\\n            },\\r\\n            /**\\r\\n             * Dismisses all open notifications.\\r\\n             *\\r\\n             * @param {Object} excpet [optional] The notification object to exclude from dismissal.\\r\\n             *\\r\\n             */\\r\\n            dismissAll: function (except) {\\r\\n                var clone = openInstances.slice(0);\\r\\n                for (var x = 0; x < clone.length; x += 1) {\\r\\n                    var  instance = clone[x];\\r\\n                    if (except === undefined || except !== instance) {\\r\\n                        instance.dismiss();\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        };\\r\\n    })();\\r\\n    /**\\r\\n     * Alertify public API\\r\\n     * This contains everything that is exposed through the alertify object.\\r\\n     *\\r\\n     * @return {Object}\\r\\n     */\\r\\n    function Alertify() {\\r\\n\\r\\n        // holds a references of created dialogs\\r\\n        var dialogs = {};\\r\\n\\r\\n        /**\\r\\n         * Extends a given prototype by merging properties from base into sub.\\r\\n         *\\r\\n         * @sub {Object} sub The prototype being overwritten.\\r\\n         * @base {Object} base The prototype being written.\\r\\n         *\\r\\n         * @return {Object} The extended prototype.\\r\\n         */\\r\\n        function extend(sub, base) {\\r\\n            // copy dialog pototype over definition.\\r\\n            for (var prop in base) {\\r\\n                if (base.hasOwnProperty(prop)) {\\r\\n                    sub[prop] = base[prop];\\r\\n                }\\r\\n            }\\r\\n            return sub;\\r\\n        }\\r\\n\\r\\n\\r\\n        /**\\r\\n        * Helper: returns a dialog instance from saved dialogs.\\r\\n        * and initializes the dialog if its not already initialized.\\r\\n        *\\r\\n        * @name {String} name The dialog name.\\r\\n        *\\r\\n        * @return {Object} The dialog instance.\\r\\n        */\\r\\n        function get_dialog(name) {\\r\\n            var dialog = dialogs[name].dialog;\\r\\n            //initialize the dialog if its not already initialized.\\r\\n            if (dialog && typeof dialog.__init === 'function') {\\r\\n                dialog.__init(dialog);\\r\\n            }\\r\\n            return dialog;\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Helper:  registers a new dialog definition.\\r\\n         *\\r\\n         * @name {String} name The dialog name.\\r\\n         * @Factory {Function} Factory a function resposible for creating dialog prototype.\\r\\n         * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.\\r\\n         * @base {String} base the name of another dialog to inherit from.\\r\\n         *\\r\\n         * @return {Object} The dialog definition.\\r\\n         */\\r\\n        function register(name, Factory, transient, base) {\\r\\n            var definition = {\\r\\n                dialog: null,\\r\\n                factory: Factory\\r\\n            };\\r\\n\\r\\n            //if this is based on an existing dialog, create a new definition\\r\\n            //by applying the new protoype over the existing one.\\r\\n            if (base !== undefined) {\\r\\n                definition.factory = function () {\\r\\n                    return extend(new dialogs[base].factory(), new Factory());\\r\\n                };\\r\\n            }\\r\\n\\r\\n            if (!transient) {\\r\\n                //create a new definition based on dialog\\r\\n                definition.dialog = extend(new definition.factory(), dialog);\\r\\n            }\\r\\n            return dialogs[name] = definition;\\r\\n        }\\r\\n\\r\\n        return {\\r\\n            /**\\r\\n             * Alertify defaults\\r\\n             * \\r\\n             * @type {Object}\\r\\n             */\\r\\n            defaults: defaults,\\r\\n            /**\\r\\n             * Dialogs factory \\r\\n             *\\r\\n             * @param {string}      Dialog name.\\r\\n             * @param {Function}    A Dialog factory function.\\r\\n             * @param {Boolean}     Indicates whether to create a singleton or transient dialog.\\r\\n             * @param {String}      The name of the base type to inherit from.\\r\\n             */\\r\\n            dialog: function (name, Factory, transient, base) {\\r\\n\\r\\n                // get request, create a new instance and return it.\\r\\n                if (typeof Factory !== 'function') {\\r\\n                    return get_dialog(name);\\r\\n                }\\r\\n\\r\\n                if (this.hasOwnProperty(name)) {\\r\\n                    throw new Error('alertify.dialog: name already exists');\\r\\n                }\\r\\n\\r\\n                // register the dialog\\r\\n                var definition = register(name, Factory, transient, base);\\r\\n\\r\\n                if (transient) {\\r\\n\\r\\n                    // make it public\\r\\n                    this[name] = function () {\\r\\n                        //if passed with no params, consider it a get request\\r\\n                        if (arguments.length === 0) {\\r\\n                            return definition.dialog;\\r\\n                        } else {\\r\\n                            var instance = extend(new definition.factory(), dialog);\\r\\n                            //ensure init\\r\\n                            if (instance && typeof instance.__init === 'function') {\\r\\n                                instance.__init(instance);\\r\\n                            }\\r\\n                            instance['main'].apply(instance, arguments);\\r\\n                            return instance['show'].apply(instance);\\r\\n                        }\\r\\n                    };\\r\\n                } else {\\r\\n                    // make it public\\r\\n                    this[name] = function () {\\r\\n                        //ensure init\\r\\n                        if (definition.dialog && typeof definition.dialog.__init === 'function') {\\r\\n                            definition.dialog.__init(definition.dialog);\\r\\n                        }\\r\\n                        //if passed with no params, consider it a get request\\r\\n                        if (arguments.length === 0) {\\r\\n                            return definition.dialog;\\r\\n                        } else {\\r\\n                            var dialog = definition.dialog;\\r\\n                            dialog['main'].apply(definition.dialog, arguments);\\r\\n                            return dialog['show'].apply(definition.dialog);\\r\\n                        }\\r\\n                    };\\r\\n                }\\r\\n            },\\r\\n            /**\\r\\n             * Close all open dialogs.\\r\\n             *\\r\\n             * @param {Object} excpet [optional] The dialog object to exclude from closing.\\r\\n             *\\r\\n             * @return {undefined}\\r\\n             */\\r\\n            closeAll: function (except) {\\r\\n                var clone = openDialogs.slice(0);\\r\\n                for (var x = 0; x < clone.length; x += 1) {\\r\\n                    var instance = clone[x];\\r\\n                    if (except === undefined || except !== instance) {\\r\\n                        instance.close();\\r\\n                    }\\r\\n                }\\r\\n            },\\r\\n            /**\\r\\n             * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.\\r\\n             *\\r\\n             * @param {string} name The dialog name.\\r\\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\\r\\n             * @param {Variant} value Optional, the value associated with the key (in case it was a string).\\r\\n             *\\r\\n             * @return {undefined}\\r\\n             */\\r\\n            setting: function (name, key, value) {\\r\\n\\r\\n                if (name === 'notifier') {\\r\\n                    return notifier.setting(key, value);\\r\\n                }\\r\\n\\r\\n                var dialog = get_dialog(name);\\r\\n                if (dialog) {\\r\\n                    return dialog.setting(key, value);\\r\\n                }\\r\\n            },\\r\\n            /**\\r\\n             * [Alias] Sets dialog settings/options \\r\\n             */\\r\\n            set: function(name,key,value){\\r\\n                return this.setting(name, key,value);\\r\\n            },\\r\\n            /**\\r\\n             * [Alias] Gets dialog settings/options \\r\\n             */\\r\\n            get: function(name, key){\\r\\n                return this.setting(name, key);\\r\\n            },\\r\\n            /**\\r\\n             * Creates a new notification message.\\r\\n             * If a type is passed, a class name \\\"ajs-{type}\\\" will be added.\\r\\n             * This allows for custom look and feel for various types of notifications.\\r\\n             *\\r\\n             * @param  {String | DOMElement}    [message=undefined]\\t\\tMessage text\\r\\n             * @param  {String}                 [type='']\\t\\t\\t\\tType of log message\\r\\n             * @param  {String}                 [wait='']\\t\\t\\t\\tTime (in seconds) to wait before auto-close\\r\\n             * @param  {Function}               [callback=undefined]\\tA callback function to be invoked when the log is closed.\\r\\n             *\\r\\n             * @return {Object} Notification object.\\r\\n             */\\r\\n            notify: function (message, type, wait, callback) {\\r\\n                return notifier.create(type, callback).push(message, wait);\\r\\n            },\\r\\n            /**\\r\\n             * Creates a new notification message.\\r\\n             *\\r\\n             * @param  {String}\\t\\t[message=undefined]\\t\\tMessage text\\r\\n             * @param  {String}     [wait='']\\t\\t\\t\\tTime (in seconds) to wait before auto-close\\r\\n             * @param  {Function}\\t[callback=undefined]\\tA callback function to be invoked when the log is closed.\\r\\n             *\\r\\n             * @return {Object} Notification object.\\r\\n             */\\r\\n            message: function (message, wait, callback) {\\r\\n                return notifier.create(null, callback).push(message, wait);\\r\\n            },\\r\\n            /**\\r\\n             * Creates a new notification message of type 'success'.\\r\\n             *\\r\\n             * @param  {String}\\t\\t[message=undefined]\\t\\tMessage text\\r\\n             * @param  {String}     [wait='']\\t\\t\\t\\tTime (in seconds) to wait before auto-close\\r\\n             * @param  {Function}\\t[callback=undefined]\\tA callback function to be invoked when the log is closed.\\r\\n             *\\r\\n             * @return {Object} Notification object.\\r\\n             */\\r\\n            success: function (message, wait, callback) {\\r\\n                return notifier.create('success', callback).push(message, wait);\\r\\n            },\\r\\n            /**\\r\\n             * Creates a new notification message of type 'error'.\\r\\n             *\\r\\n             * @param  {String}\\t\\t[message=undefined]\\t\\tMessage text\\r\\n             * @param  {String}     [wait='']\\t\\t\\t\\tTime (in seconds) to wait before auto-close\\r\\n             * @param  {Function}\\t[callback=undefined]\\tA callback function to be invoked when the log is closed.\\r\\n             *\\r\\n             * @return {Object} Notification object.\\r\\n             */\\r\\n            error: function (message, wait, callback) {\\r\\n                return notifier.create('error', callback).push(message, wait);\\r\\n            },\\r\\n            /**\\r\\n             * Creates a new notification message of type 'warning'.\\r\\n             *\\r\\n             * @param  {String}\\t\\t[message=undefined]\\t\\tMessage text\\r\\n             * @param  {String}     [wait='']\\t\\t\\t\\tTime (in seconds) to wait before auto-close\\r\\n             * @param  {Function}\\t[callback=undefined]\\tA callback function to be invoked when the log is closed.\\r\\n             *\\r\\n             * @return {Object} Notification object.\\r\\n             */\\r\\n            warning: function (message, wait, callback) {\\r\\n                return notifier.create('warning', callback).push(message, wait);\\r\\n            },\\r\\n            /**\\r\\n             * Dismisses all open notifications\\r\\n             *\\r\\n             * @return {undefined}\\r\\n             */\\r\\n            dismissAll: function () {\\r\\n                notifier.dismissAll();\\r\\n            }\\r\\n        };\\r\\n    }\\r\\n    var alertify = new Alertify();\\r\\n\\r\\n    /**\\r\\n    * Alert dialog definition\\r\\n    *\\r\\n    * invoked by:\\r\\n    *\\talertify.alert(message);\\r\\n    *\\talertify.alert(title, message);\\r\\n    *\\talertify.alert(message, onok);\\r\\n    *\\talertify.alert(title, message, onok);\\r\\n     */\\r\\n    alertify.dialog('alert', function () {\\r\\n        return {\\r\\n            main: function (_title, _message, _onok) {\\r\\n                var title, message, onok;\\r\\n                switch (arguments.length) {\\r\\n                case 1:\\r\\n                    message = _title;\\r\\n                    break;\\r\\n                case 2:\\r\\n                    if (typeof _message === 'function') {\\r\\n                        message = _title;\\r\\n                        onok = _message;\\r\\n                    } else {\\r\\n                        title = _title;\\r\\n                        message = _message;\\r\\n                    }\\r\\n                    break;\\r\\n                case 3:\\r\\n                    title = _title;\\r\\n                    message = _message;\\r\\n                    onok = _onok;\\r\\n                    break;\\r\\n                }\\r\\n                this.set('title', title);\\r\\n                this.set('message', message);\\r\\n                this.set('onok', onok);\\r\\n                return this;\\r\\n            },\\r\\n            setup: function () {\\r\\n                return {\\r\\n                    buttons: [\\r\\n                        {\\r\\n                            text: alertify.defaults.glossary.ok,\\r\\n                            key: keys.ESC,\\r\\n                            invokeOnClose: true,\\r\\n                            className: alertify.defaults.theme.ok,\\r\\n                        }\\r\\n                    ],\\r\\n                    focus: {\\r\\n                        element: 0,\\r\\n                        select: false\\r\\n                    },\\r\\n                    options: {\\r\\n                        maximizable: false,\\r\\n                        resizable: false\\r\\n                    }\\r\\n                };\\r\\n            },\\r\\n            build: function () {\\r\\n                // nothing\\r\\n            },\\r\\n            prepare: function () {\\r\\n                //nothing\\r\\n            },\\r\\n            setMessage: function (message) {\\r\\n                this.setContent(message);\\r\\n            },\\r\\n            settings: {\\r\\n                message: undefined,\\r\\n                onok: undefined,\\r\\n                label: undefined,\\r\\n            },\\r\\n            settingUpdated: function (key, oldValue, newValue) {\\r\\n                switch (key) {\\r\\n                case 'message':\\r\\n                    this.setMessage(newValue);\\r\\n                    break;\\r\\n                case 'label':\\r\\n                    if (this.__internal.buttons[0].element) {\\r\\n                        this.__internal.buttons[0].element.innerHTML = newValue;\\r\\n                    }\\r\\n                    break;\\r\\n                }\\r\\n            },\\r\\n            callback: function (closeEvent) {\\r\\n                if (typeof this.get('onok') === 'function') {\\r\\n                    var returnValue = this.get('onok').call(this, closeEvent);\\r\\n                    if (typeof returnValue !== 'undefined') {\\r\\n                        closeEvent.cancel = !returnValue;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        };\\r\\n    });\\r\\n    /**\\r\\n     * Confirm dialog object\\r\\n     *\\r\\n     *\\talertify.confirm(message);\\r\\n     *\\talertify.confirm(message, onok);\\r\\n     *\\talertify.confirm(message, onok, oncancel);\\r\\n     *\\talertify.confirm(title, message, onok, oncancel);\\r\\n     */\\r\\n    alertify.dialog('confirm', function () {\\r\\n\\r\\n        var autoConfirm = {\\r\\n            timer: null,\\r\\n            index: null,\\r\\n            text: null,\\r\\n            duration: null,\\r\\n            task: function (event, self) {\\r\\n                if (self.isOpen()) {\\r\\n                    self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';\\r\\n                    autoConfirm.duration -= 1;\\r\\n                    if (autoConfirm.duration === -1) {\\r\\n                        clearAutoConfirm(self);\\r\\n                        var button = self.__internal.buttons[autoConfirm.index];\\r\\n                        var closeEvent = createCloseEvent(autoConfirm.index, button);\\r\\n\\r\\n                        if (typeof self.callback === 'function') {\\r\\n                            self.callback.apply(self, [closeEvent]);\\r\\n                        }\\r\\n                        //close the dialog.\\r\\n                        if (closeEvent.close !== false) {\\r\\n                            self.close();\\r\\n                        }\\r\\n                    }\\r\\n                } else {\\r\\n                    clearAutoConfirm(self);\\r\\n                }\\r\\n            }\\r\\n        };\\r\\n\\r\\n        function clearAutoConfirm(self) {\\r\\n            if (autoConfirm.timer !== null) {\\r\\n                clearInterval(autoConfirm.timer);\\r\\n                autoConfirm.timer = null;\\r\\n                self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        function startAutoConfirm(self, index, duration) {\\r\\n            clearAutoConfirm(self);\\r\\n            autoConfirm.duration = duration;\\r\\n            autoConfirm.index = index;\\r\\n            autoConfirm.text = self.__internal.buttons[index].element.innerHTML;\\r\\n            autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);\\r\\n            autoConfirm.task(null, self);\\r\\n        }\\r\\n\\r\\n\\r\\n        return {\\r\\n            main: function (_title, _message, _onok, _oncancel) {\\r\\n                var title, message, onok, oncancel;\\r\\n                switch (arguments.length) {\\r\\n                case 1:\\r\\n                    message = _title;\\r\\n                    break;\\r\\n                case 2:\\r\\n                    message = _title;\\r\\n                    onok = _message;\\r\\n                    break;\\r\\n                case 3:\\r\\n                    message = _title;\\r\\n                    onok = _message;\\r\\n                    oncancel = _onok;\\r\\n                    break;\\r\\n                case 4:\\r\\n                    title = _title;\\r\\n                    message = _message;\\r\\n                    onok = _onok;\\r\\n                    oncancel = _oncancel;\\r\\n                    break;\\r\\n                }\\r\\n                this.set('title', title);\\r\\n                this.set('message', message);\\r\\n                this.set('onok', onok);\\r\\n                this.set('oncancel', oncancel);\\r\\n                return this;\\r\\n            },\\r\\n            setup: function () {\\r\\n                return {\\r\\n                    buttons: [\\r\\n                        {\\r\\n                            text: alertify.defaults.glossary.ok,\\r\\n                            key: keys.ENTER,\\r\\n                            className: alertify.defaults.theme.ok,\\r\\n                        },\\r\\n                        {\\r\\n                            text: alertify.defaults.glossary.cancel,\\r\\n                            key: keys.ESC,\\r\\n                            invokeOnClose: true,\\r\\n                            className: alertify.defaults.theme.cancel,\\r\\n                        }\\r\\n                    ],\\r\\n                    focus: {\\r\\n                        element: 0,\\r\\n                        select: false\\r\\n                    },\\r\\n                    options: {\\r\\n                        maximizable: false,\\r\\n                        resizable: false\\r\\n                    }\\r\\n                };\\r\\n            },\\r\\n            build: function () {\\r\\n                //nothing\\r\\n            },\\r\\n            prepare: function () {\\r\\n                //nothing\\r\\n            },\\r\\n            setMessage: function (message) {\\r\\n                this.setContent(message);\\r\\n            },\\r\\n            settings: {\\r\\n                message: null,\\r\\n                labels: null,\\r\\n                onok: null,\\r\\n                oncancel: null,\\r\\n                defaultFocus: null,\\r\\n                reverseButtons: null,\\r\\n            },\\r\\n            settingUpdated: function (key, oldValue, newValue) {\\r\\n                switch (key) {\\r\\n                case 'message':\\r\\n                    this.setMessage(newValue);\\r\\n                    break;\\r\\n                case 'labels':\\r\\n                    if ('ok' in newValue && this.__internal.buttons[0].element) {\\r\\n                        this.__internal.buttons[0].text = newValue.ok;\\r\\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\\r\\n                    }\\r\\n                    if ('cancel' in newValue && this.__internal.buttons[1].element) {\\r\\n                        this.__internal.buttons[1].text = newValue.cancel;\\r\\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\\r\\n                    }\\r\\n                    break;\\r\\n                case 'reverseButtons':\\r\\n                    if (newValue === true) {\\r\\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\\r\\n                    } else {\\r\\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\\r\\n                    }\\r\\n                    break;\\r\\n                case 'defaultFocus':\\r\\n                    this.__internal.focus.element = newValue === 'ok' ? 0 : 1;\\r\\n                    break;\\r\\n                }\\r\\n            },\\r\\n            callback: function (closeEvent) {\\r\\n                clearAutoConfirm(this);\\r\\n                var returnValue;\\r\\n                switch (closeEvent.index) {\\r\\n                case 0:\\r\\n                    if (typeof this.get('onok') === 'function') {\\r\\n                        returnValue = this.get('onok').call(this, closeEvent);\\r\\n                        if (typeof returnValue !== 'undefined') {\\r\\n                            closeEvent.cancel = !returnValue;\\r\\n                        }\\r\\n                    }\\r\\n                    break;\\r\\n                case 1:\\r\\n                    if (typeof this.get('oncancel') === 'function') {\\r\\n                        returnValue = this.get('oncancel').call(this, closeEvent);\\r\\n                        if (typeof returnValue !== 'undefined') {\\r\\n                            closeEvent.cancel = !returnValue;\\r\\n                        }\\r\\n                    }\\r\\n                    break;\\r\\n                }\\r\\n            },\\r\\n            autoOk: function (duration) {\\r\\n                startAutoConfirm(this, 0, duration);\\r\\n                return this;\\r\\n            },\\r\\n            autoCancel: function (duration) {\\r\\n                startAutoConfirm(this, 1, duration);\\r\\n                return this;\\r\\n            }\\r\\n        };\\r\\n    });\\r\\n    /**\\r\\n     * Prompt dialog object\\r\\n     *\\r\\n     * invoked by:\\r\\n     *\\talertify.prompt(message);\\r\\n     *\\talertify.prompt(message, value);\\r\\n     *\\talertify.prompt(message, value, onok);\\r\\n     *\\talertify.prompt(message, value, onok, oncancel);\\r\\n     *\\talertify.prompt(title, message, value, onok, oncancel);\\r\\n     */\\r\\n    alertify.dialog('prompt', function () {\\r\\n        var input = document.createElement('INPUT');\\r\\n        var p = document.createElement('P');\\r\\n        return {\\r\\n            main: function (_title, _message, _value, _onok, _oncancel) {\\r\\n                var title, message, value, onok, oncancel;\\r\\n                switch (arguments.length) {\\r\\n                case 1:\\r\\n                    message = _title;\\r\\n                    break;\\r\\n                case 2:\\r\\n                    message = _title;\\r\\n                    value = _message;\\r\\n                    break;\\r\\n                case 3:\\r\\n                    message = _title;\\r\\n                    value = _message;\\r\\n                    onok = _value;\\r\\n                    break;\\r\\n                case 4:\\r\\n                    message = _title;\\r\\n                    value = _message;\\r\\n                    onok = _value;\\r\\n                    oncancel = _onok;\\r\\n                    break;\\r\\n                case 5:\\r\\n                    title = _title;\\r\\n                    message = _message;\\r\\n                    value = _value;\\r\\n                    onok = _onok;\\r\\n                    oncancel = _oncancel;\\r\\n                    break;\\r\\n                }\\r\\n                this.set('title', title);\\r\\n                this.set('message', message);\\r\\n                this.set('value', value);\\r\\n                this.set('onok', onok);\\r\\n                this.set('oncancel', oncancel);\\r\\n                return this;\\r\\n            },\\r\\n            setup: function () {\\r\\n                return {\\r\\n                    buttons: [\\r\\n                        {\\r\\n                            text: alertify.defaults.glossary.ok,\\r\\n                            key: keys.ENTER,\\r\\n                            className: alertify.defaults.theme.ok,\\r\\n                        },\\r\\n                        {\\r\\n                            text: alertify.defaults.glossary.cancel,\\r\\n                            key: keys.ESC,\\r\\n                            invokeOnClose: true,\\r\\n                            className: alertify.defaults.theme.cancel,\\r\\n                        }\\r\\n                    ],\\r\\n                    focus: {\\r\\n                        element: input,\\r\\n                        select: true\\r\\n                    },\\r\\n                    options: {\\r\\n                        maximizable: false,\\r\\n                        resizable: false\\r\\n                    }\\r\\n                };\\r\\n            },\\r\\n            build: function () {\\r\\n                input.className = alertify.defaults.theme.input;\\r\\n                input.setAttribute('type', 'text');\\r\\n                input.value = this.get('value');\\r\\n                this.elements.content.appendChild(p);\\r\\n                this.elements.content.appendChild(input);\\r\\n            },\\r\\n            prepare: function () {\\r\\n                //nothing\\r\\n            },\\r\\n            setMessage: function (message) {\\r\\n                if (typeof message === 'string') {\\r\\n                    clearContents(p);\\r\\n                    p.innerHTML = message;\\r\\n                } else if (message instanceof window.HTMLElement && p.firstChild !== message) {\\r\\n                    clearContents(p);\\r\\n                    p.appendChild(message);\\r\\n                }\\r\\n            },\\r\\n            settings: {\\r\\n                message: undefined,\\r\\n                labels: undefined,\\r\\n                onok: undefined,\\r\\n                oncancel: undefined,\\r\\n                value: '',\\r\\n                type:'text',\\r\\n                reverseButtons: undefined,\\r\\n            },\\r\\n            settingUpdated: function (key, oldValue, newValue) {\\r\\n                switch (key) {\\r\\n                case 'message':\\r\\n                    this.setMessage(newValue);\\r\\n                    break;\\r\\n                case 'value':\\r\\n                    input.value = newValue;\\r\\n                    break;\\r\\n                case 'type':\\r\\n                    switch (newValue) {\\r\\n                    case 'text':\\r\\n                    case 'color':\\r\\n                    case 'date':\\r\\n                    case 'datetime-local':\\r\\n                    case 'email':\\r\\n                    case 'month':\\r\\n                    case 'number':\\r\\n                    case 'password':\\r\\n                    case 'search':\\r\\n                    case 'tel':\\r\\n                    case 'time':\\r\\n                    case 'week':\\r\\n                        input.type = newValue;\\r\\n                        break;\\r\\n                    default:\\r\\n                        input.type = 'text';\\r\\n                        break;\\r\\n                    }\\r\\n                    break;\\r\\n                case 'labels':\\r\\n                    if (newValue.ok && this.__internal.buttons[0].element) {\\r\\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\\r\\n                    }\\r\\n                    if (newValue.cancel && this.__internal.buttons[1].element) {\\r\\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\\r\\n                    }\\r\\n                    break;\\r\\n                case 'reverseButtons':\\r\\n                    if (newValue === true) {\\r\\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\\r\\n                    } else {\\r\\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\\r\\n                    }\\r\\n                    break;\\r\\n                }\\r\\n            },\\r\\n            callback: function (closeEvent) {\\r\\n                var returnValue;\\r\\n                switch (closeEvent.index) {\\r\\n                case 0:\\r\\n                    this.settings.value = input.value;\\r\\n                    if (typeof this.get('onok') === 'function') {\\r\\n                        returnValue = this.get('onok').call(this, closeEvent, this.settings.value);\\r\\n                        if (typeof returnValue !== 'undefined') {\\r\\n                            closeEvent.cancel = !returnValue;\\r\\n                        }\\r\\n                    }\\r\\n                    break;\\r\\n                case 1:\\r\\n                    if (typeof this.get('oncancel') === 'function') {\\r\\n                        returnValue = this.get('oncancel').call(this, closeEvent);\\r\\n                        if (typeof returnValue !== 'undefined') {\\r\\n                            closeEvent.cancel = !returnValue;\\r\\n                        }\\r\\n                    }\\r\\n                    if(!closeEvent.cancel){\\r\\n                        input.value = this.settings.value;\\r\\n                    }\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        };\\r\\n    });\\r\\n\\r\\n    // CommonJS\\r\\n    if ( typeof module === 'object' && typeof module.exports === 'object' ) {\\r\\n        module.exports = alertify;\\r\\n    // AMD\\r\\n    } else if ( typeof define === 'function' && define.amd) {\\r\\n        define( [], function () {\\r\\n            return alertify;\\r\\n        } );\\r\\n    // window\\r\\n    } else if ( !window.alertify ) {\\r\\n        window.alertify = alertify;\\r\\n    }\\r\\n\\r\\n} ( typeof window !== 'undefined' ? window : this ) );\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/ng2-tree/node_modules/raw-loader!D:/ng2-tree/node_modules/alertifyjs/build/alertify.js\n// module id = ../../../../raw-loader/index.js!../../../../alertifyjs/build/alertify.js\n// module chunks = scripts","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nmodule.exports = function(src) {\n\tfunction log(error) {\n\t\t(typeof console !== \"undefined\")\n\t\t&& (console.error || console.log)(\"[Script Loader]\", error);\n\t}\n\n\t// Check for IE =< 8\n\tfunction isIE() {\n\t\treturn typeof attachEvent !== \"undefined\" && typeof addEventListener === \"undefined\";\n\t}\n\n\ttry {\n\t\tif (typeof execScript !== \"undefined\" && isIE()) {\n\t\t\texecScript(src);\n\t\t} else if (typeof eval !== \"undefined\") {\n\t\t\teval.call(null, src);\n\t\t} else {\n\t\t\tlog(\"EvalError: No eval function available\");\n\t\t}\n\t} catch (error) {\n\t\tlog(error);\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/ng2-tree/node_modules/script-loader/addScript.js\n// module id = ../../../../script-loader/addScript.js\n// module chunks = scripts","require(\"!!D:\\\\ng2-tree\\\\node_modules\\\\script-loader\\\\addScript.js\")(require(\"!!D:\\\\ng2-tree\\\\node_modules\\\\raw-loader\\\\index.js!D:\\\\ng2-tree\\\\node_modules\\\\alertifyjs\\\\build\\\\alertify.js\"))\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/ng2-tree/node_modules/script-loader!D:/ng2-tree/node_modules/alertifyjs/build/alertify.js\n// module id = ../../../../script-loader/index.js!../../../../alertifyjs/build/alertify.js\n// module chunks = scripts"],"sourceRoot":"webpack:///"}